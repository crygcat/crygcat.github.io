<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Java】学习记录·Optional</title>
      <link href="/posts/d3d3ba51.html"/>
      <url>/posts/d3d3ba51.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-简介"><a class="markdownIt-Anchor" href="#一-简介"></a> 一、简介</h1><p>Optional 是一个容器对象，可以包含也可以不包含非 NULL 值。Optional 在 Java 8 中引入，目的是解决<code>NullPointerException（NPE）</code>的问题。本质上，Optional 是一个包装器类，其中包含对其他对象的引用。在这种情况下，对象只是指向内存位置的指针，并且也可以指向任何内容。从其它角度看，Optional 提供一种类型级解决方案来表示可选值而不是空引用。</p><h2 id="1-在-optional-之前"><a class="markdownIt-Anchor" href="#1-在-optional-之前"></a> 1. 在 Optional 之前</h2><p>在 Java 8 之前，程序员将返回<code>Null</code>而不是 Optional。这种方法有一些缺点。一种是没有明确的方法来表示<code>NULL</code>可能是一个特殊值。相比之下，在 API 中返回 Optional 是明确的声明，其中可能没有值。如果我们要确保不会出现空指针异常，则需要对每个引用进行显式的空检查。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private void getIsoCode(User user)&#123;</span><br><span class="line">if (user != null) &#123;</span><br><span class="line">Address address = user.getAddress();</span><br><span class="line">if (address != null) &#123;</span><br><span class="line">Country country = address.getCountry();</span><br><span class="line">if (country != null) &#123;</span><br><span class="line">String isocode = country.getIsocode();</span><br><span class="line">if (isocode != null) &#123;</span><br><span class="line">isocode = isocode.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-在-optional-之后"><a class="markdownIt-Anchor" href="#2-在-optional-之后"></a> 2. 在 Optional 之后</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class OptionalDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Optional&lt;Member&gt; optional = getMemberByIdFromDB();</span><br><span class="line">        optional.ifPresent(mem -&gt; &#123;</span><br><span class="line">            System.out.println(&quot;会员姓名是：&quot; + mem.getName());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Optional&lt;Member&gt; getMemberByIdFromDB() &#123;</span><br><span class="line">        boolean hasName = true;</span><br><span class="line">        if (hasName) &#123;</span><br><span class="line">            return Optional.of(new Member(&quot;张三&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">        return Optional.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getMemberByIdFromDB()</code>方法返回了<code>Optional&lt;Member&gt;</code>作为结果，这样就表明<code>Member</code>可能存在，也可能不存在，这时候就可以在 Optional 的<code>ifPresent()</code>方法中使用<code>Lambda</code>表达式来直接打印结果。</p><p>Optional 之所以可以解决<code>NullPointerException（NPE）</code>的问题，是因为它明确的告诉我们，不需要对它进行判空。它就好像十字路口的路标，明确地告诉你该往哪走。</p><hr /><h1 id="二-使用"><a class="markdownIt-Anchor" href="#二-使用"></a> 二、使用</h1><h2 id="1-创建"><a class="markdownIt-Anchor" href="#1-创建"></a> 1. 创建</h2><h3 id="empty"><a class="markdownIt-Anchor" href="#empty"></a> empty()</h3><p>可以使用静态方法<code>empty()</code>创建一个空的 Optional 对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; empty = Optional.empty();</span><br><span class="line">System.out.println(empty); // 输出：Optional.empty</span><br></pre></td></tr></table></figure><h3 id="of"><a class="markdownIt-Anchor" href="#of"></a> of()</h3><p>可以使用静态方法<code>of()</code>创建一个非空的 Optional 对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; opt = Optional.of(&quot;张三&quot;);</span><br><span class="line">System.out.println(opt); // 输出：Optional[张三]</span><br></pre></td></tr></table></figure><p>当然了，传递给<code>of()</code>方法的参数必须是非空的，也就是说不能为<code>NULL</code>，否则仍然会抛出<code>NullPointerException</code>。</p><h3 id="ofnullable"><a class="markdownIt-Anchor" href="#ofnullable"></a> ofNullable()</h3><p>可以使用静态方法<code>ofNullable()</code>创建一个即可空又可非空的 Optional 对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String name = null;</span><br><span class="line">Optional&lt;String&gt; optOrNull = Optional.ofNullable(name);</span><br><span class="line">System.out.println(optOrNull); // 输出：Optional.empty</span><br></pre></td></tr></table></figure><p><code>ofNullable()</code>方法内部有一个三元表达式，如果为参数为<code>NULL</code>，则返回私有常量<code>EMPTY</code>；否则使用<code>new</code>关键字创建了一个新的 Optional 对象——不会再抛出<code>NullPointerException（NPE）</code>异常了。</p><h2 id="2-判断值是否存在"><a class="markdownIt-Anchor" href="#2-判断值是否存在"></a> 2. 判断值是否存在</h2><p>可以通过方法<code>isPresent()</code>判断一个 Optional 对象是否存在，如果存在，该方法返回<code>true</code>，否则返回<code>false</code>——取代了<code>obj != null</code>的判断。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; opt = Optional.of(&quot;张三&quot;);</span><br><span class="line">System.out.println(opt.isPresent()); // 输出：true</span><br><span class="line"></span><br><span class="line">Optional&lt;String&gt; optOrNull = Optional.ofNullable(null);</span><br><span class="line">System.out.println(opt.isPresent()); // 输出：false</span><br></pre></td></tr></table></figure><h2 id="3-非空表达式"><a class="markdownIt-Anchor" href="#3-非空表达式"></a> 3. 非空表达式</h2><p>Optional 类有一个非常现代化的方法——ifPresent()，允许我们使用函数式编程的方式执行一些代码，因此，我把它称为非空表达式。可以直接将 Lambda 表达式传递给该方法，代码更加简洁，更加直观。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; opt = Optional.of(&quot;张三&quot;);</span><br><span class="line">opt.ifPresent(str -&gt; System.out.println(str.length()));</span><br></pre></td></tr></table></figure><h2 id="4-设置获取默认值"><a class="markdownIt-Anchor" href="#4-设置获取默认值"></a> 4. 设置（获取）默认值</h2><hr /><blockquote><p>相关引用：</p><ol><li><a href="https://juejin.cn/post/6844903960050925581">掘进稀土 - Java8 Optional用法和最佳实践</a></li><li><a href="https://blog.csdn.net/qing_gee/article/details/104767082">CSDN - 干货，一文彻底搞懂 Java 的 Optional</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Docker】个人RSS服务-TTRSS</title>
      <link href="/posts/4c2e0a2d.html"/>
      <url>/posts/4c2e0a2d.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><h2 id="一-什么是rss"><a class="markdownIt-Anchor" href="#一-什么是rss"></a> 一、什么是RSS</h2><p>引用Wiki机翻的几段话：</p><blockquote><p>RSS（RDF Site Summary或Really Simple Syndication） 是一种网络feed，它允许用户和应用程序以标准化的计算机可读格式访问网站的更新。订阅 RSS 提要可以让用户在一个新闻聚合器中跟踪许多不同的网站，该聚合器会不断监控网站的新内容，而无需用户手动检查它们。<br />网站通常使用 RSS 提要发布经常更新的信息，例如博客条目、新闻标题、音频和视频系列剧集，或用于分发播客。RSS 文档（称为“提要”、“网络提要”、或“频道”）包括完整或摘要文本以及元数据，例如发布日期和作者姓名。RSS 格式是使用通用XML文件指定的。<br />尽管 RSS 格式早在 1999 年 3 月就已经发展，是在 2005 年到 2006 年间 RSS 得到广泛使用，并且 (” Feed-icon.svg”) 图标由几个主要的 Web 浏览器决定。RSS 提要数据使用称为新闻聚合器的软件呈现给用户，内容的传递称为网络联合。用户可以通过在阅读器中输入提要的URI或单击浏览器的提要图标来订阅提要。RSS 阅读器定期检查用户的提要以获取新信息，如果启用了该功能，则可以自动下载。</p></blockquote><p>所以，RSS是PC时代的产物，算是一个很古老的信息获取方式</p><h2 id="二-rss和常用的阅读平台有什么不同"><a class="markdownIt-Anchor" href="#二-rss和常用的阅读平台有什么不同"></a> 二、RSS和常用的阅读平台有什么不同</h2><p>如果是看文字的话，知乎、头条、公众号、微博这些App（下面统称App）咱们还是很常用的。<br />我觉得RSS和App之间的功能差异有以下几点：</p><h3 id="1-评论功能"><a class="markdownIt-Anchor" href="#1-评论功能"></a> 1. 评论功能</h3><ul><li><strong>RSS</strong>的评论功能是比较弱的。读者和创作者的互动交流比较差。</li><li><strong>App</strong>的评论系统通常是比较完善的。读者和创作者的互动交流比较好。如果你喜欢B站的话，也会被它的弹幕功能所吸引。</li></ul><h3 id="2-内容传递"><a class="markdownIt-Anchor" href="#2-内容传递"></a> 2. 内容传递</h3><ul><li><strong>RSS</strong>：内容创作者——观众</li><li><strong>App</strong>：内容创作者——App——观众</li></ul><h3 id="3-聚合程度"><a class="markdownIt-Anchor" href="#3-聚合程度"></a> 3. 聚合程度</h3><ul><li><strong>RSS</strong>：全源聚合。只要创作者提供rss源（技术上是很容易的，只不过创作者不一定愿意）。</li><li><strong>App</strong>：一般只能展示自己平台的内容。如果你要展示别的平台，通常是转发或者是二次创作的内容</li></ul><h3 id="4-便捷程度"><a class="markdownIt-Anchor" href="#4-便捷程度"></a> 4. 便捷程度</h3><ul><li><strong>RSS</strong>：一个App（一个RSS阅读器）。订阅内容有限，每天查看1次就足够了。</li><li><strong>App</strong>：通常是2个或以上，没有上限。可以经常刷，内容看不完。种类繁多。下面列举常见的应用：<br />文字内容创作平台：知乎、今日头条、百度贴吧、豆瓣、微博、小红书、公众号、CSDN、简书等<br />音频内容创作平台：喜马拉雅、荔枝FM、蜻蜓FM等<br />电商平台：闲鱼、淘宝、拼多多等</li></ul><h3 id="5-观看体验"><a class="markdownIt-Anchor" href="#5-观看体验"></a> 5. 观看体验</h3><ul><li><strong>RSS</strong>：有些内容（比如大部分个人博客）是可以直接在RSS阅读器上看；有些内容（比如少数派）要跳转到原始页面。有些内容，在RSS阅读器里看效果也不好。视频一般都要跳到新页面查看。</li><li><strong>App</strong>：全程在App里观看，观看体验好。</li></ul><h3 id="6-过滤功能"><a class="markdownIt-Anchor" href="#6-过滤功能"></a> 6. 过滤功能</h3><ul><li><strong>RSS</strong>：有些内容（比如大部分个人博客）是可以直接在RSS阅读器上看；有些内容（比如少数派）要跳转到原始页面。有些内容，在RSS阅读器里看效果也不好。视频一般都要跳到新页面查看。</li><li><strong>App</strong>：全程在App里观看，观看体验好。</li></ul><h3 id="7-广告"><a class="markdownIt-Anchor" href="#7-广告"></a> 7. 广告</h3><ul><li><strong>RSS</strong>：无广告且免费。</li><li><strong>App</strong>：有些内容是免费；经常有广告。</li></ul><hr /><h1 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1><p>官网：<a href="https://ttrss.henry.wang">https://ttrss.henry.wang</a></p><p>软件优势：</p><blockquote><p>基于Docker，自建难度低，迁移性好。<br />自建RSS订阅器平台足够强大。有fiter功能等。<br />数据完全掌握在自己手中。可通过duplicati备份。<br />无广告，不担心托管平台倒闭。RSS阅读器平台经常会由于盈利或政策原因关门。<br />没有订阅数上限或其它恶心的限制。完全免费。<br />进一步压榨VPS。毕竟有这么多性能溢出！</p></blockquote><hr /><h1 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h1><h2 id="一-前置"><a class="markdownIt-Anchor" href="#一-前置"></a> 一、前置</h2><blockquote><p>该安装方法是基于<code>Docker</code>安装，其余安装方式可从其他渠道查询<br />安装Docker：</p></blockquote><h2 id="二-创建安装目录"><a class="markdownIt-Anchor" href="#二-创建安装目录"></a> 二、创建安装目录</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line">mkdir -p /root/data/docker_data/ttrss</span><br><span class="line"></span><br><span class="line">cd /root/data/docker_data/ttrss</span><br></pre></td></tr></table></figure><h2 id="三-配置安装文件"><a class="markdownIt-Anchor" href="#三-配置安装文件"></a> 三、配置安装文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>英文输入法下，按<code>i</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  service.rss:</span><br><span class="line">    image: wangqiru/ttrss:latest</span><br><span class="line">    container_name: ttrss</span><br><span class="line">    ports:</span><br><span class="line">      - 181:80</span><br><span class="line">    environment:</span><br><span class="line">      - SELF_URL_PATH=http://localhost:181/ # 修改为自己外网访问的地址</span><br><span class="line">      - DB_PASS=password # 跟下面 database.postgres 的密码保持一致</span><br><span class="line">      - PUID=1000</span><br><span class="line">      - PGID=1000</span><br><span class="line">    volumes:</span><br><span class="line">      - feed-icons:/var/www/feed-icons/</span><br><span class="line">    networks:</span><br><span class="line">      - public_access</span><br><span class="line">      - service_only</span><br><span class="line">      - database_only</span><br><span class="line">    stdin_open: true</span><br><span class="line">    tty: true</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">  service.mercury: # set Mercury Parser API endpoint to `service.mercury:3000` on TTRSS plugin setting page</span><br><span class="line">    image: wangqiru/mercury-parser-api:latest</span><br><span class="line">    container_name: mercury</span><br><span class="line">    networks:</span><br><span class="line">      - public_access</span><br><span class="line">      - service_only</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">  service.opencc: # set OpenCC API endpoint to `service.opencc:3000` on TTRSS plugin setting page</span><br><span class="line">    image: wangqiru/opencc-api-server:latest</span><br><span class="line">    container_name: opencc</span><br><span class="line">    environment:</span><br><span class="line">      - NODE_ENV=production</span><br><span class="line">    networks:</span><br><span class="line">      - service_only</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">  database.postgres:</span><br><span class="line">    image: postgres:13-alpine</span><br><span class="line">    container_name: postgres</span><br><span class="line">    environment:</span><br><span class="line">      - POSTGRES_PASSWORD=password # feel free to change the password</span><br><span class="line">    volumes:</span><br><span class="line">      - ~/postgres/data/:/var/lib/postgresql/data # 冒号左侧改为自己保存数据的路径</span><br><span class="line">    networks:</span><br><span class="line">      - database_only</span><br><span class="line">    restart: always</span><br><span class="line"></span><br><span class="line">  # utility.watchtower:</span><br><span class="line">  #   container_name: watchtower</span><br><span class="line">  #   image: containrrr/watchtower:latest</span><br><span class="line">  #   volumes:</span><br><span class="line">  #     - /var/run/docker.sock:/var/run/docker.sock</span><br><span class="line">  #   environment:</span><br><span class="line">  #     - WATCHTOWER_CLEANUP=true</span><br><span class="line">  #     - WATCHTOWER_POLL_INTERVAL=86400</span><br><span class="line">  #   restart: always</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  feed-icons:</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  public_access: # Provide the access for ttrss UI</span><br><span class="line">  service_only: # Provide the communication network between services only</span><br><span class="line">    internal: true</span><br><span class="line">  database_only: # Provide the communication between ttrss and database only</span><br><span class="line">    internal: true</span><br></pre></td></tr></table></figure><p>按一下<code>esc</code>，然后<code>:wq</code>保存退出</p><blockquote><p>此方法数据库为<code>postgres</code>，连接其他数据库可参考官网配置</p></blockquote><h2 id="四-运行"><a class="markdownIt-Anchor" href="#四-运行"></a> 四、运行</h2><p>运行配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>理论上我们就可以输入<code>http://ip:181</code>访问了。</p><blockquote><p>此处<code>ip</code>就是刚才配置文件中填写的外网访问地址</p></blockquote><p>默认账号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">帐号：admin</span><br><span class="line">密码：password</span><br></pre></td></tr></table></figure><h3 id="修改个人密码"><a class="markdownIt-Anchor" href="#修改个人密码"></a> 修改个人密码</h3><p><img src="http://www.crygcat.top:5661/i/20230804/64cd154fc1d4b.png" alt="修改密码" /><br /><img src="http://www.crygcat.top:5661/i/20230804/64cd1551c7404.png" alt="修改密码" /><br /><img src="http://www.crygcat.top:5661/i/20230804/64cd15525374d.png" alt="修改密码" /></p><h2 id="五-配置"><a class="markdownIt-Anchor" href="#五-配置"></a> 五、配置</h2><p>我们可以去<code>偏好设置</code>那里：</p><p><img src="http://www.crygcat.top:5661/i/20230804/64cd154cb7ecb.png" alt="偏好配置" /></p><h3 id="1-启用外部api"><a class="markdownIt-Anchor" href="#1-启用外部api"></a> 1. 启用外部API</h3><p>这一部分的设置主要是为了让外部终端（比如手机的Unread）可以访问它。毕竟我们很有可能经常在手机上看我们的RSS订阅！</p><p><img src="http://www.crygcat.top:5661/i/20230804/64cd154d41b8d.png" alt="启用外部API" /></p><h3 id="2-开启mercucy和opencc功能"><a class="markdownIt-Anchor" href="#2-开启mercucy和opencc功能"></a> 2. 开启Mercucy和opencc功能</h3><p>开启<code>Mercucy</code>是为了可以获取全文；开启<code>opencc</code>是为了中文的简繁体转换。记得点启用选择生效。这主要是电脑端的优化吧，对手机阅读端而言没有太多影响。</p><p><img src="http://www.crygcat.top:5661/i/20230804/64cd154c4dd4b.png" alt="开启Mercucy和opencc功能" /></p><h3 id="3-启用fever-api"><a class="markdownIt-Anchor" href="#3-启用fever-api"></a> 3. 启用Fever API</h3><p>可以用<code>bitwarden</code>生成一个密码并填入<code>Set Password</code>前面的空格中，记得点击<code>Set Password</code>保存。这个密码主要是在手机客户端通过<code>Fever API</code>订阅时需要用。你也可以设置得简单点。不过，如果你手机上有<code>bitwarden</code>的话，密码再长也无所谓，因为你不需要记住它！<br /><img src="http://www.crygcat.top:5661/i/20230804/64cd154dbb2a9.png" alt="启用Fever API" /></p><h3 id="4-设置订阅源插件"><a class="markdownIt-Anchor" href="#4-设置订阅源插件"></a> 4. 设置订阅源插件</h3><p>我们的<code>docker-compose</code>安装过程中已经内置了<code>Mercucy</code>和<code>opencc</code>两个应用。由于之前在偏好设置中启用了<code>Mercucy</code>和<code>opencc</code>功能，所以这里我们要指定它们的应用API。</p><ul><li><p><strong>Mercucy</strong><br /><img src="" alt="Mercucy" /></p></li><li><p><strong>opencc</strong><br /><img src="" alt="opencc" /></p></li></ul><hr /><blockquote><p>相关引用：</p><ol><li><a href="https://blognas.hwb0307.com/skill/816">解决信息爆炸困扰的完美方案——RSS</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 工具 </tag>
            
            <tag> TTRSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Homebrew】Homebrew安装配置</title>
      <link href="/posts/84c62c06.html"/>
      <url>/posts/84c62c06.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-安装"><a class="markdownIt-Anchor" href="#一-安装"></a> 一、安装</h1><h2 id="1-普通安装"><a class="markdownIt-Anchor" href="#1-普通安装"></a> 1. 普通安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;</span><br></pre></td></tr></table></figure><blockquote><p>可能会出现如下错误：<br />curl: (28) Failed to connect to <a href="http://raw.githubusercontent.com">raw.githubusercontent.com</a> port 443 after 75013 ms: Operation timed out</p></blockquote><h2 id="2-使用国内源安装"><a class="markdownIt-Anchor" href="#2-使用国内源安装"></a> 2. 使用国内源安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Homebrew </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Homebrew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Docker】开源音乐播放服务-Navidrome</title>
      <link href="/posts/54381121.html"/>
      <url>/posts/54381121.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-简介"><a class="markdownIt-Anchor" href="#一-简介"></a> 一、简介</h1><p>官网地址：<a href="https://www.navidrome.org">https://www.navidrome.org</a><br />帮助文档：<a href="https://www.navidrome.org/docs/">https://www.navidrome.org/docs/</a><br />项目地址：<a href="https://github.com/navidrome/navidrome/">https://github.com/navidrome/navidrome/</a></p><p>Navidrome 是一款使用<code>Golang</code>开发的音乐播放软件，内存占用很低，界面简单，而且还兼容<code>Subsonic API</code><br />Navidrome 优缺点：</p><blockquote><p><strong>先来说说优点：</strong></p><ol><li>内存占用低（待机状态40Mb左右）</li><li>界面简洁，支持中文</li><li>支持Subsonic API，也就是说Subsonic能用的客户端，Navidrome都能用</li></ol><p><strong>再来说说缺点：</strong></p><ol><li>好像没法显示歌词</li><li>不支持通过界面删除歌曲（作者说的是为了安全考虑）</li></ol></blockquote><hr /><h1 id="二-安装"><a class="markdownIt-Anchor" href="#二-安装"></a> 二、安装</h1><h2 id="1-前置"><a class="markdownIt-Anchor" href="#1-前置"></a> 1. 前置</h2><blockquote><p>该安装方法是基于<code>Docker</code>安装，其余安装方式可从其他渠道查询<br />安装Docker：</p></blockquote><h2 id="2-创建安装目录"><a class="markdownIt-Anchor" href="#2-创建安装目录"></a> 2. 创建安装目录</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line">mkdir -p /root/data/docker_data/navidrome</span><br><span class="line"></span><br><span class="line">cd /root/data/docker_data/navidrome</span><br></pre></td></tr></table></figure><h2 id="3-部署安装"><a class="markdownIt-Anchor" href="#3-部署安装"></a> 3. 部署安装</h2><h3 id="docker-指令部署-navidrome"><a class="markdownIt-Anchor" href="#docker-指令部署-navidrome"></a> Docker 指令部署 Navidrome</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">   --name navidrome \</span><br><span class="line">   --restart=unless-stopped \</span><br><span class="line">   --user $(id -u):$(id -g) \</span><br><span class="line">   -v /path/to/music:/music \</span><br><span class="line">   -v /path/to/data:/data \</span><br><span class="line">   -p 4533:4533 \ </span><br><span class="line">   -e ND_LOGLEVEL=info \</span><br><span class="line">   deluan/navidrome:latest</span><br></pre></td></tr></table></figure><blockquote><p><code>/path/to/music</code>：你本地主机的音乐文件夹<br /><code>/path/to/data</code>：Navidrome 配置数据文件夹</p></blockquote><h3 id="docker-compose-配置部署"><a class="markdownIt-Anchor" href="#docker-compose-配置部署"></a> docker-compose 配置部署</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>英文输入法下，按<code>i</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  navidrome:</span><br><span class="line">    container_name: navidrome</span><br><span class="line">    image: deluan/navidrome:latest</span><br><span class="line">    user: 0:0 #0:0代表用root用户运行</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;4533:4533&quot;</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    environment:</span><br><span class="line">      # Optional: put your config options customization here. Examples:</span><br><span class="line">      ND_SCANSCHEDULE: 1h</span><br><span class="line">      ND_LOGLEVEL: info  </span><br><span class="line">      ND_SESSIONTIMEOUT: 24h</span><br><span class="line">      ND_BASEURL: &quot;&quot;</span><br><span class="line">      ND_ENABLETRANSCODINGCONFIG: &quot;true&quot;</span><br><span class="line">      ND_TRANSCODINGCACHESIZE: &quot;4000M&quot;</span><br><span class="line">      ND_IMAGECACHESIZE: &quot;1000M&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;/apps/navidrome/data:/data&quot; #左边为用来存储navidrome数据的本地路径</span><br><span class="line">      - &quot;/media/Music:/music:ro&quot; #左边为您主机上的音乐文件夹路径</span><br></pre></td></tr></table></figure><p>按一下<code>esc</code>，然后<code>:wq</code>保存退出</p><h2 id="4-运行启动"><a class="markdownIt-Anchor" href="#4-运行启动"></a> 4. 运行启动</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>理论上我们就可以输入<code>http://ip:4533</code>访问了。首次访问会要求设置一个帐号、密码。</p><blockquote><p>注意：<br />1、不知道服务器 IP，可以直接在命令行输入：curl <a href="http://ip.sb">ip.sb</a>，会显示当前服务器的 IP。<br />2、遇到访问不了的情况，请再次检查在宝塔面板的防火墙和服务商的后台防火墙是否打开对应了端口。</p></blockquote><p>可以点击右上方用户按钮 - Personal - Language改成中文，如下图：</p><hr /><blockquote><p>相关引用：</p><ol><li><a href="https://blog.xiaoz.org/archives/16527">小z博客-使用Docker部署开源音乐播放服务Navidrome，打造自己的云音乐</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 工具 </tag>
            
            <tag> Navidrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Docker】Docker常见问题整合（持续更新）</title>
      <link href="/posts/879c2af5.html"/>
      <url>/posts/879c2af5.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-docker-pull拉取镜像时出错提示拉取镜像超时"><a class="markdownIt-Anchor" href="#一-docker-pull拉取镜像时出错提示拉取镜像超时"></a> 一、docker pull拉取镜像时出错提示拉取镜像超时</h1><h2 id="1-修改镜像仓库地址"><a class="markdownIt-Anchor" href="#1-修改镜像仓库地址"></a> 1. 修改镜像仓库地址</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://yxzrazem.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="2-修改dns"><a class="markdownIt-Anchor" href="#2-修改dns"></a> 2. 修改DNS</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/resolv.conf</span><br><span class="line"></span><br><span class="line">//输入</span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 8.8.4.4</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 合集 </tag>
            
            <tag> 持续更新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Docker】分布式文件存储系统-MinIO</title>
      <link href="/posts/5b07c357.html"/>
      <url>/posts/5b07c357.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-minio简介"><a class="markdownIt-Anchor" href="#一-minio简介"></a> 一、MinIO简介</h1><p>MinIO 是一个基于<code>Apache License v2.0</code>开源协议的对象存储服务。它兼容亚马逊S3云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器/虚拟机镜像等，而一个对象文件可以是任意大小，从<code>几kb</code>到最大<code>5T</code>不等。</p><p>MinIO 是一个非常轻量的服务,可以很简单的和其他应用的结合，类似<code>NodeJS</code>,<code>Redis</code>或者<code>MySQL</code>。</p><p>官网：<a href="http://www.minio.org.cn/">MinIO | 高性能，对Kubernetes友好的对象存储</a><br /><img src="http://www.crygcat.top:5661/i/20230804/64cd17e7dcdfb.png" alt="官网" /></p><hr /><h1 id="二-minio的优点"><a class="markdownIt-Anchor" href="#二-minio的优点"></a> 二、MinIO的优点</h1><h2 id="1-性能"><a class="markdownIt-Anchor" href="#1-性能"></a> 1. 性能</h2><p>MinIO 号称是世界上速度最快的对象存储服务器。在标准硬件上，对象存储的读/写速度最高可以达到<code>183GB/s</code>和<code>171GB/s</code>。</p><h2 id="2-容器化支持"><a class="markdownIt-Anchor" href="#2-容器化支持"></a> 2. 容器化支持</h2><p>MinIO 提供了与<code>k8s</code>、<code>etcd</code>、<code>docker</code>等容器化技术深度集成方案，可以说就是为了云环境而生的。</p><h2 id="3-丰富的sdk支持"><a class="markdownIt-Anchor" href="#3-丰富的sdk支持"></a> 3. 丰富的SDK支持</h2><p>MinIO 几乎提供了所有主流开发语言的SDK以及文档。</p><h2 id="4-awss3标准兼容"><a class="markdownIt-Anchor" href="#4-awss3标准兼容"></a> 4 。AWSS3标准兼容</h2><p>Amazon的<code>S3 API</code>是对象存储领域的事实标准。MinIO是S3兼容性的事实上的标准，是第一个采用API和第一个添加对<code>S3 Select</code>支持的标准之一。包括微软Azure在内的750多家公司使用MinIO的S3网关，这一数字超过了业内其他公司的总和。</p><hr /><h1 id="三-安装minio"><a class="markdownIt-Anchor" href="#三-安装minio"></a> 三、安装MinIO</h1><h2 id="1-前置"><a class="markdownIt-Anchor" href="#1-前置"></a> 1. 前置</h2><blockquote><p>该安装方法是基于<code>Docker</code>安装，其余安装方式可从其他渠道查询<br />安装Docker：</p></blockquote><h2 id="2-安装"><a class="markdownIt-Anchor" href="#2-安装"></a> 2. 安装</h2><p>官网给的安装教程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 9000:9000 --name minio1 \</span><br><span class="line">  -e &quot;MINIO_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE&quot; \</span><br><span class="line">  -e &quot;MINIO_SECRET_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY&quot; \</span><br><span class="line">  -v /mnt/data:/data \</span><br><span class="line">  -v /mnt/config:/root/.minio \</span><br><span class="line">  minio/minio server /data</span><br></pre></td></tr></table></figure><blockquote><p><strong>存在问题：</strong><br />浏览器无法访问 MinIO 控制台，因为没有对外暴露控制台端口<br /><strong>解决方案：</strong><br />对外暴露 MinIO 控制台的端口，通过<code>–console-address &quot;:50000&quot;</code>指定控制台端口为静态端口</p></blockquote><p>所以我们使用以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9000:9000 -p 50000:50000 --name minio \</span><br><span class="line">-e &quot;MINIO_ROOT_USER=admin&quot; \</span><br><span class="line">-e &quot;MINIO_ROOT_PASSWORD=12345678&quot; \</span><br><span class="line">-v /mnt/data:/data \</span><br><span class="line">-v /mnt/config:/root/.minio \</span><br><span class="line">minio/minio server --console-address &quot;:50000&quot; /data</span><br><span class="line"></span><br><span class="line"># 稍微说一下</span><br><span class="line"># -d 后台运行</span><br><span class="line"># -p 9000:9000 前面的9000是打开本机的9000端口映射docker容器中MinIO的9000端口</span><br><span class="line"># -e &quot;MINIO_ROOT_USER=admin&quot; \ 改用户名</span><br><span class="line"># -e &quot;MINIO_ROOT_PASSWORD=12345678&quot; \  改密码，注意：密码尽量不要带符号，如*，#之类</span><br><span class="line"># -v /mnt/data:/data \ 挂载卷</span><br><span class="line"># -v /mnt/config:/root/.minio \  挂载卷</span><br><span class="line"># --console-address &quot;:50000&quot;指定控制台端口为静态端口</span><br></pre></td></tr></table></figure><blockquote><p>记得打开<code>9000</code>与<code>50000</code>的防火墙</p></blockquote><h2 id="3-配置"><a class="markdownIt-Anchor" href="#3-配置"></a> 3. 配置</h2><h3 id="创建-buckets桶"><a class="markdownIt-Anchor" href="#创建-buckets桶"></a> 创建 Buckets（桶）</h3><p>点击<code>Buckets</code> - <code>Create Bucket</code><br /><img src="http://www.crygcat.top:5661/i/20230804/64cd17e58509f.png" alt="创建 Buckets（桶）01" /></p><p>填写桶名称，根据需要点击选项，最后点击<code>Create Bucket</code>完成创建<br /><img src="http://www.crygcat.top:5661/i/20230804/64cd17e5d5d29.png" alt="创建 Buckets（桶）02" /></p><blockquote><p>注：完成创建后需重启才能生效，可使用<code>Docker</code>直接重启</p></blockquote><h3 id="创建-service-account"><a class="markdownIt-Anchor" href="#创建-service-account"></a> 创建 Service Account</h3><p>点击<code>Access Keys</code> - <code>Create access key</code><br /><img src="http://www.crygcat.top:5661/i/20230804/64cd17e65bb7e.png" alt="创建Key01" /></p><blockquote><p>如果只对特定Buckets（桶）开放 Service Account，则需要<code>Restrict beyond user policy</code>选择<code>ON</code>，并对内容进行配置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;Version&quot;: &quot;2012-10-17&quot;,</span><br><span class="line"> &quot;Statement&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">   &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">   &quot;Action&quot;: [</span><br><span class="line">    &quot;admin:*&quot;</span><br><span class="line">   ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">   &quot;Action&quot;: [</span><br><span class="line">    &quot;kms:*&quot;</span><br><span class="line">   ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">   &quot;Action&quot;: [</span><br><span class="line">    &quot;s3:*&quot;</span><br><span class="line">   ],</span><br><span class="line">   &quot;Resource&quot;: [</span><br><span class="line">    &quot;arn:aws:s3:::指定Buckets（桶）的名称/*&quot;</span><br><span class="line">   ]</span><br><span class="line">  &#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击<code>Create</code>创建 Service Account<br /><img src="http://www.crygcat.top:5661/i/20230804/64cd17e6e0cb4.png" alt="创建Key02" /></p><p>创建成功会生成<code>Access Key</code>和<code>Secret Key</code>，点击<code>Download for import</code>下载保存信息，或单独复制保存<br /><img src="http://www.crygcat.top:5661/i/20230804/64cd17e75a72c.png" alt="创建Key03" /></p><h3 id="设置区域"><a class="markdownIt-Anchor" href="#设置区域"></a> 设置区域</h3><p>点击<code>Settings</code>，填入<code>cn</code>，<code>中国</code>，点击<code>Restore Defaults</code>完成设置<br /><img src="http://www.crygcat.top:5661/i/20230804/64cd17e96d761.png" alt="设置区域" /></p><hr /><h1 id="四-迁移minio"><a class="markdownIt-Anchor" href="#四-迁移minio"></a> 四、迁移MinIO</h1><h2 id="1-准备"><a class="markdownIt-Anchor" href="#1-准备"></a> 1. 准备</h2><p>我们将使用名为<code>mc</code>的官方 MinIO 客户端。<br />我使用<code>macOS</code>,所以安装非常简单。该过程假设在不同平台上是相似的。<br />在本例中,我们要将数据从<code>my_source</code>迁移到<code>my_destination</code>。<br />我们从创建这样的配置开始。<br />默认路径在您的主目录<code>(~/.mc/config.json)</code>中。<br />该文件应该看起来像这样(使用您的值)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;10&quot;,</span><br><span class="line">    &quot;aliases&quot;: &#123;</span><br><span class="line">        &quot;my_source&quot;: &#123;</span><br><span class="line">            &quot;url&quot;: &quot;http://&lt;remote_ip&gt;:9001&quot;,</span><br><span class="line">            &quot;accessKey&quot;: &quot;my_access_key&quot;,</span><br><span class="line">            &quot;secretKey&quot;: &quot;my_secret&quot;,</span><br><span class="line">            &quot;api&quot;: &quot;S3v2&quot;,</span><br><span class="line">            &quot;path&quot;: &quot;auto&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;my_destination&quot;: &#123;</span><br><span class="line">            &quot;url&quot;: &quot;https://data.example.com&quot;,</span><br><span class="line">            &quot;accessKey&quot;: &quot;my_access_key&quot;,</span><br><span class="line">            &quot;secretKey&quot;: &quot;my_secret&quot;,</span><br><span class="line">            &quot;api&quot;: &quot;S3v4&quot;,</span><br><span class="line">            &quot;path&quot;: &quot;auto&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-迁移"><a class="markdownIt-Anchor" href="#2-迁移"></a> 2. 迁移</h2><p>我们将使用<code>mc mirror</code>命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mc mirror my_source my_destination</span><br></pre></td></tr></table></figure><hr /><h1 id="五-拓展"><a class="markdownIt-Anchor" href="#五-拓展"></a> 五、拓展</h1><h2 id="1-使用minio同步思源云笔记"><a class="markdownIt-Anchor" href="#1-使用minio同步思源云笔记"></a> 1. 使用MinIO同步思源云笔记</h2>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 工具 </tag>
            
            <tag> MinIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Docker】反向代理神器-Nginx Proxy Manager</title>
      <link href="/posts/2c0ae732.html"/>
      <url>/posts/2c0ae732.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-简介"><a class="markdownIt-Anchor" href="#一-简介"></a> 一、简介</h1><p><code>Nginx proxy manager</code>是一个很简单的反向代理工具。</p><p>官网：<a href="https://nginxproxymanager.com/">https://nginxproxymanager.com/</a></p><p>门槛极低，操作简单，不需要你掌握很复杂的<code>Nginx</code>配置知识，只需要几步就能很轻松完成反向代理的设置和SSL证书的部署。</p><hr /><h1 id="二-安装-nginx-proxy-manager"><a class="markdownIt-Anchor" href="#二-安装-nginx-proxy-manager"></a> 二、安装 Nginx Proxy Manager</h1><h2 id="1-前置"><a class="markdownIt-Anchor" href="#1-前置"></a> 1. 前置</h2><blockquote><p>该安装方法是基于<code>Docker</code>安装，其余安装方式可从其他渠道查询<br />安装Docker：</p></blockquote><h2 id="2-创建安装目录"><a class="markdownIt-Anchor" href="#2-创建安装目录"></a> 2. 创建安装目录</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line">mkdir -p /root/data/docker_data/npm</span><br><span class="line"></span><br><span class="line">cd /root/data/docker_data/npm</span><br></pre></td></tr></table></figure><h2 id="3-创建-docker-安装文件"><a class="markdownIt-Anchor" href="#3-创建-docker-安装文件"></a> 3. 创建 Docker 安装文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>英文输入法下，按<code>i</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  app:</span><br><span class="line">    image: &#x27;jc21/nginx-proxy-manager:latest&#x27;</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    ports:</span><br><span class="line">      # These ports are in format &lt;host-port&gt;;&lt;container-port&gt;</span><br><span class="line">      - &#x27;80:80&#x27; # Public HTTP Port</span><br><span class="line">      - &#x27;443:443&#x27; # Public HTTPS Port</span><br><span class="line">      - &#x27;81:81&#x27; # Admin Web Port</span><br><span class="line">      # Add any other Stream port you want to expose</span><br><span class="line">      # - &#x27;21:21&#x27;# FTP</span><br><span class="line">    environment:</span><br><span class="line">      DB_MYSQL_HOST: &#x27;db&#x27;</span><br><span class="line">      DB_MYSQL_PORT: 3306</span><br><span class="line">      DB_MYSQL_USER: &#x27;npm&#x27;</span><br><span class="line">      DB_MYSQL_PASSWORD: &#x27;npm&#x27;</span><br><span class="line">      DB_MYSQL_NAME: &#x27;npm&#x27;</span><br><span class="line">      # Uncomment this if IPv6 is not enabled on your host</span><br><span class="line">      # DISABLE IPV6:&#x27;true&#x27;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./data:/data # 冒号左边可以改路径，现在是表示把数据存放在在当前文件夹下的 data 文件夹中</span><br><span class="line">      - ./letsencrypt:/etc/letsencrypt # 冒号左边可以改路径，现在是表示把数据存放在在当前文件夹下的 letsencrypt 文件夹中</span><br><span class="line">    depends on:</span><br><span class="line">      - db</span><br><span class="line"></span><br><span class="line">  db:</span><br><span class="line">    image: &#x27;jc21/mariadb-aria:latest&#x27;</span><br><span class="line">    restart; unless-stopped</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: &#x27;npm&#x27;</span><br><span class="line">      MYSQL_DATABASE: &#x27;npm&#x27;</span><br><span class="line">      MYSQL_USER: &#x27;npm&#x27;</span><br><span class="line">      MYSQL_PASSWORD: &#x27;npm&#x27;</span><br><span class="line">    volumes :</span><br><span class="line">      - ./data/mysql:/var/lib/mysql</span><br></pre></td></tr></table></figure><p>按一下<code>esc</code>，然后<code>:wq</code>保存退出</p><h2 id="4-运行并访问-nginx-proxy-manager"><a class="markdownIt-Anchor" href="#4-运行并访问-nginx-proxy-manager"></a> 4. 运行并访问 Nginx Proxy Manager</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>理论上我们就可以输入<code>http://ip:81</code>访问了。</p><p>默认登陆名和密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Email:    admin@example.com</span><br><span class="line">Password: changeme</span><br></pre></td></tr></table></figure><blockquote><p>注意：<br />1、不知道服务器 IP，可以直接在命令行输入：curl <a href="http://ip.sb">ip.sb</a>，会显示当前服务器的 IP。<br />2、遇到访问不了的情况，请再次检查在宝塔面板的防火墙和服务商的后台防火墙是否打开对应了端口。</p></blockquote><hr /><h1 id="三-更新-nginx-proxy-manager"><a class="markdownIt-Anchor" href="#三-更新-nginx-proxy-manager"></a> 三、更新 Nginx Proxy Manager</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd /root/data/docker_data/npm</span><br><span class="line"></span><br><span class="line">docker-compose down </span><br><span class="line"></span><br><span class="line">cp -r /root/data/docker_data/npm /root/data/docker_data/npm.archive  # 万事先备份，以防万一</span><br><span class="line"></span><br><span class="line">docker-compose pull</span><br><span class="line"></span><br><span class="line">docker-compose up -d    # 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。</span><br><span class="line"></span><br><span class="line">docker image prune  # prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to continue? [y/N] </span><br></pre></td></tr></table></figure><p>输入<code>y</code></p><hr /><h1 id="四-卸载-nginx-proxy-manager"><a class="markdownIt-Anchor" href="#四-卸载-nginx-proxy-manager"></a> 四、卸载 Nginx Proxy Manager</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /root/data/docker_data/npm</span><br><span class="line"></span><br><span class="line">docker-compose down </span><br><span class="line"></span><br><span class="line">rm -rf /root/data/docker_data/npm  # 完全删除映射到本地的数据</span><br></pre></td></tr></table></figure><hr /><blockquote><p>相关引用：<br /><a href="https://zhuanlan.zhihu.com/p/536791628?utm_id=0">知乎 -【玩转docker】反向代理神器：Nginx Proxy Manager</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 工具 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】Spring线程池ThreadPoolTaskExecutor的使用</title>
      <link href="/posts/3c6911bc.html"/>
      <url>/posts/3c6911bc.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】Linux常见问题整合（持续更新）</title>
      <link href="/posts/6d096cc7.html"/>
      <url>/posts/6d096cc7.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-zsh-permission-denied"><a class="markdownIt-Anchor" href="#一-zsh-permission-denied"></a> 一、zsh: permission denied</h1><p><strong>原因：</strong><br />通常是用户没有脚本的执行权限。<br /><strong>解决：</strong><br />可以输入以下语句为用户添加执行权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x &lt;脚本文件&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 持续更新 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Node】Node常用命令整理（持续更新）</title>
      <link href="/posts/d7af5d2a.html"/>
      <url>/posts/d7af5d2a.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-查看已安装的模块"><a class="markdownIt-Anchor" href="#一-查看已安装的模块"></a> 一、查看已安装的模块</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls --depth 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 持续更新 </tag>
            
            <tag> Node </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Markdown】Markdown中Latex数学公式基本语法</title>
      <link href="/posts/3f6928ea.html"/>
      <url>/posts/3f6928ea.html</url>
      
        <content type="html"><![CDATA[<p>😃</p><h1 id="公式排版"><a class="markdownIt-Anchor" href="#公式排版"></a> 公式排版</h1><p>分为两种排版：</p><ul><li>行内公式：用\ 或者 $ 包裹公式</li><li>独立公式：用 $ 包裹公式。<br />例如:<br />$ \sum_{i=0}<sup>{n}i</sup>2 $ 表示∑ni=0i2</li></ul><p class='katex-block katex-error' title='ParseError: KaTeX parse error: Can&#039;t use function &#039;$&#039; in math mode at position 20: …m_{i=0}^{n}i^2 $̲$ 表示 ∑i=0ni2'> \sum_{i=0}^{n}i^2 $$ 表示 ∑i=0ni2</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 数学公式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Mysql】语句记录</title>
      <link href="/posts/db7550aa.html"/>
      <url>/posts/db7550aa.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-实现用逗号进行拼接-以逗号进行分割"><a class="markdownIt-Anchor" href="#一-实现用逗号进行拼接-以逗号进行分割"></a> 一、实现用逗号进行拼接、以逗号进行分割</h1><h2 id="group_concat-函数"><a class="markdownIt-Anchor" href="#group_concat-函数"></a> group_concat 函数</h2><p>用法：group_concat (待拼接对象)<br />输出：用逗号进行拼接后的字符串</p><hr /><h1 id="二-获取特定列小于某值的记录"><a class="markdownIt-Anchor" href="#二-获取特定列小于某值的记录"></a> 二、获取特定列小于某值的记录</h1><p>想法：<br />我想获取一个表中的所有记录，直到特定列的总和小于或等于<code>n</code>。</p><p>例如：</p><table><thead><tr><th style="text-align:left">slno</th><th style="text-align:left">item</th><th style="text-align:left">price</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">item1</td><td style="text-align:left">1000</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">item2</td><td style="text-align:left">2000</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">item3</td><td style="text-align:left">3000</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">item4</td><td style="text-align:left">4000</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">item5</td><td style="text-align:left">5000</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">item6</td><td style="text-align:left">6000</td></tr></tbody></table><p>我想从上面的表中获取所有记录，直到总和(价格)小于或等于 10000</p><p>因此，对于上表，我的结果将是前 4 条记录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//方案一</span><br><span class="line">SELECT slno, item, price</span><br><span class="line">  FROM</span><br><span class="line">(</span><br><span class="line">  SELECT slno, item, price, @t := @t + price total</span><br><span class="line">    FROM table1 CROSS JOIN (SELECT @t := 0) i</span><br><span class="line">   ORDER BY slno</span><br><span class="line">) q</span><br><span class="line"> WHERE total &lt;= 10000</span><br><span class="line"> </span><br><span class="line">//方案二</span><br><span class="line">SELECT slno, item, price</span><br><span class="line">  FROM</span><br><span class="line">(</span><br><span class="line">  SELECT slno, item, price, </span><br><span class="line">  (</span><br><span class="line">    SELECT SUM(price)</span><br><span class="line">      FROM table1</span><br><span class="line">     WHERE slno &lt;= t.slno</span><br><span class="line">  ) total</span><br><span class="line">    FROM table1 t</span><br><span class="line">) q</span><br><span class="line"> WHERE total &lt;= 10000</span><br><span class="line"> ORDER BY slno</span><br></pre></td></tr></table></figure><hr /><h1 id="三-left-join查找和展示count为0的记录"><a class="markdownIt-Anchor" href="#三-left-join查找和展示count为0的记录"></a> 三、left join查找和展示count(*)为0的记录</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">A.policyCode, </span><br><span class="line">IFNULL(B.ZH,0) </span><br><span class="line">FROM (select policyCode from t_warningPolicy) AS A </span><br><span class="line">LEFT JOIN </span><br><span class="line">(</span><br><span class="line">SELECT policyCode,COUNT(*) as ZH FROM t_warning GROUP BY policyCode</span><br><span class="line">) AS B </span><br><span class="line">ON A.policyCode=B.policyCode</span><br></pre></td></tr></table></figure><hr /><h1 id="四-group-by-时出现-only_full_group_by-错误"><a class="markdownIt-Anchor" href="#四-group-by-时出现-only_full_group_by-错误"></a> 四、group by 时出现 only_full_group_by 错误</h1><h2 id="any_value"><a class="markdownIt-Anchor" href="#any_value"></a> ANY_VALUE</h2><p>用法：ANY_VALUE(字段名)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">  id,</span><br><span class="line">  ANY_VALUE(name)</span><br><span class="line">from table</span><br><span class="line">group by id</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】更高级的Markdown渲染器</title>
      <link href="/posts/248bb79c.html"/>
      <url>/posts/248bb79c.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】Linux常用命令整合（持续更新）</title>
      <link href="/posts/fb16e999.html"/>
      <url>/posts/fb16e999.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-文件"><a class="markdownIt-Anchor" href="#一-文件"></a> 一、文件</h1><h2 id="1-mv"><a class="markdownIt-Anchor" href="#1-mv"></a> 1. mv</h2><p><code>mv</code>命令来为文件或目录改名或将文件由一个目录移入另一个目录中。该命令等同于<code>DOS</code>系统下的<code>ren</code>和<code>move</code>命令的组合。它的使用权限是<code>所有用户</code>。<br /><strong>格式：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv [options] 源文件或目录 目标文件或目录</span><br></pre></td></tr></table></figure><blockquote><p>参数<br />－i：交互方式操作。如果mv操作将导致对已存在的目标文件的覆盖，此时系统询问是否重写，要求用户回答”y”或”n”，这样可以避免误覆盖文件。<br />－f：禁止交互操作。mv操作要覆盖某个已有的目标文件时不给任何指示，指定此参数后i参数将不再起作用。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 将/usr/udt中的所有文件移到当前目录(用”.”表示)中</span><br><span class="line">mv /usr/udt/* .</span><br><span class="line"></span><br><span class="line">// 将文件test.txt重命名为wbk.txt</span><br><span class="line">mv test.txt wbk.txt</span><br><span class="line"></span><br><span class="line">// 把当前目录的一个子目录里的文件移动到另一个子目录里</span><br><span class="line">mv 文件名/* 另一个目录</span><br><span class="line"></span><br><span class="line">// 移动当前文件夹下的所有文件到上一级目录</span><br><span class="line">mv * ../</span><br></pre></td></tr></table></figure><h1 id="二-打包压缩"><a class="markdownIt-Anchor" href="#二-打包压缩"></a> 二、打包压缩</h1><h2 id="1-tar"><a class="markdownIt-Anchor" href="#1-tar"></a> 1. .tar</h2><blockquote><p>参数<br />-c：建立一个包文件，后缀为 .tar<br />-x：解开一个包文件<br />-z：以gzip命令压缩/解压缩<br />-v：处理的过程中显示文件<br />-f：file 指定文件名</p><p>参数示例<br />tar -zcvf —— 打包同时进行压缩，生成 .tar.gz<br />tar -zxvf —— 对压缩后的打包文件进行解压<br />tar -cvf —— 只对文件进行打包，没压缩<br />tar -xvf —— 对 .tar 文件进行解包</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 打包</span><br><span class="line">tar cvf FileName.tar DirName</span><br><span class="line">（注：tar是打包，不是压缩！）</span><br><span class="line"></span><br><span class="line">// 解包</span><br><span class="line">tar xvf FileName.tar</span><br></pre></td></tr></table></figure><h2 id="2-gz"><a class="markdownIt-Anchor" href="#2-gz"></a> 2. .gz</h2><p><strong>简介：</strong><br /><code>·gzip</code>是在<code>Linux</code>系统中经常使用的一个对文件进行压缩和解压缩的命令，既方便又好用。<code>gzip</code>不仅可以用来压缩大的、较少使用的文件以节省磁盘空间，还可以和<code>tar</code>命令一起构成<code>Linux</code>操作系统中比较流行的压缩文件格式。<code>gzip</code>命令对文本文件有<code>60%～70%</code>的压缩率。减少文件大小有两个明显的好处，一是可以减少存储空间，二是通过网络传输文件时，可以减少传输的时间。</p><p><strong>特点：</strong><br /><code>gzip</code>只能压缩文件，不能压缩目录，后缀名为<code>.gz</code>，压缩后原文件会被删除</p><blockquote><p>参数<br />-c：写到标准输出上，保持原始文件<br />-d：解压缩<br />-f：强制压缩或解压缩<br />-r：递归访问目录结构，压缩文件</p></blockquote><h3 id="gz"><a class="markdownIt-Anchor" href="#gz"></a> .gz</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 压缩</span><br><span class="line">gzip FileName</span><br><span class="line"></span><br><span class="line">// 解压1</span><br><span class="line">gunzip FileName.gz</span><br><span class="line">// 解压2</span><br><span class="line">gzip -d FileName.gz</span><br></pre></td></tr></table></figure><h3 id="targz-和-tgz"><a class="markdownIt-Anchor" href="#targz-和-tgz"></a> .tar.gz 和 .tgz</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 压缩</span><br><span class="line">tar zcvf FileName.tar.gz DirName</span><br><span class="line"></span><br><span class="line">// 解压</span><br><span class="line">tar zxvf FileName.tar.gz</span><br></pre></td></tr></table></figure><h2 id="3-zip"><a class="markdownIt-Anchor" href="#3-zip"></a> 3. .zip</h2><p><strong>简介：</strong><br />在<code>Linux</code>压缩后的文件，基本都可以在<code>Windows</code>系统中解压；<code>Windows</code>中压缩的文件，在<code>Linux</code>中不一定可用，但是<code>zip</code>格式的压缩文件，可以做到可用</p><p><strong>缺点：</strong><br />zip的压缩比不是很高</p><blockquote><p>参数：<br />-r：递归压缩，包含目录内的全部文件<br />-f：只更新有变动的文件，生成新的压缩包</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 压缩</span><br><span class="line">zip FileName.zip DirName</span><br><span class="line"></span><br><span class="line">// 解压</span><br><span class="line">unzip FileName.zip</span><br></pre></td></tr></table></figure><h2 id="4-rar"><a class="markdownIt-Anchor" href="#4-rar"></a> 4. .rar</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 压缩</span><br><span class="line">rar a FileName.rar DirName</span><br><span class="line"></span><br><span class="line">// 解压</span><br><span class="line">rar x FileName.rar</span><br></pre></td></tr></table></figure><h2 id="5-bz"><a class="markdownIt-Anchor" href="#5-bz"></a> 5. .bz</h2><h3 id="bz"><a class="markdownIt-Anchor" href="#bz"></a> .bz</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 压缩： 未知</span><br><span class="line"></span><br><span class="line">// 解压1</span><br><span class="line">bzip2 -d FileName.bz</span><br><span class="line">// 解压2</span><br><span class="line">bunzip2 FileName.bz</span><br></pre></td></tr></table></figure><h3 id="tarbz"><a class="markdownIt-Anchor" href="#tarbz"></a> .tar.bz</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 压缩：未知</span><br><span class="line"></span><br><span class="line">// 解压</span><br><span class="line">tar jxvf FileName.tar.bz</span><br></pre></td></tr></table></figure><h2 id="6-bz2"><a class="markdownIt-Anchor" href="#6-bz2"></a> 6. .bz2</h2><h3 id="bz2"><a class="markdownIt-Anchor" href="#bz2"></a> .bz2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 压缩</span><br><span class="line">bzip2 -z FileName</span><br><span class="line"></span><br><span class="line">// 解压1</span><br><span class="line">bzip2 -d FileName.bz2</span><br><span class="line">// 解压2</span><br><span class="line">bunzip2 FileName.bz2</span><br></pre></td></tr></table></figure><h3 id="tarbz2"><a class="markdownIt-Anchor" href="#tarbz2"></a> .tar.bz2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 压缩</span><br><span class="line">tar jcvf FileName.tar.bz2 DirName</span><br><span class="line"></span><br><span class="line">// 解压</span><br><span class="line">tar jxvf FileName.tar.bz2</span><br></pre></td></tr></table></figure><h2 id="7-z"><a class="markdownIt-Anchor" href="#7-z"></a> 7. .Z</h2><h3 id="z"><a class="markdownIt-Anchor" href="#z"></a> .Z</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 压缩</span><br><span class="line">compress FileName</span><br><span class="line"></span><br><span class="line">// 解压</span><br><span class="line">uncompress FileName.Z</span><br></pre></td></tr></table></figure><h3 id="tarz"><a class="markdownIt-Anchor" href="#tarz"></a> .tar.Z</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 压缩</span><br><span class="line">tar Zcvf FileName.tar.Z DirName</span><br><span class="line"></span><br><span class="line">// 解压</span><br><span class="line">tar Zxvf FileName.tar.Z</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 持续更新 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【中间件】学习记录·RocketMQ（一）</title>
      <link href="/posts/b1ea5646.html"/>
      <url>/posts/b1ea5646.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-简介"><a class="markdownIt-Anchor" href="#一-简介"></a> 一、简介</h1><p>官网文档地址：<a href="https://rocketmq.apache.org/zh/docs/">https://rocketmq.apache.org/zh/docs/</a></p><p>RocketMQ是由阿里捐赠给Apache的一款<code>低延迟</code>、<code>高并发</code>、<code>高可用</code>、<code>高可靠</code>的分布式消息中间件。经历了淘宝双十一的洗礼。RocketMQ既可为分布式应用系统提供<code>异步解耦</code>和<code>削峰填谷</code>的能力，同时也具备互联网应用所需的海量消息堆积、高吞吐、可靠重试等特性。</p><p>MQ（Message Queue）消息队列，是基础数据结构中<code>“先进先出”</code>的一种数据结构。一般用来解决应用解耦，异步消息，流量削峰等问题，实现<code>高性能</code>，<code>高可用</code>，<code>可伸缩</code>和<code>最终一致性</code>架构。</p><hr /><h1 id="二-mq用途"><a class="markdownIt-Anchor" href="#二-mq用途"></a> 二、MQ用途</h1><h2 id="1-异步"><a class="markdownIt-Anchor" href="#1-异步"></a> 1. 异步</h2><p>提升用户体验和系统吞吐量，把一部分同步的动作异步化，提高接口<code>响应率（RT）</code>。例如：现在门店用户注册，后台的逻辑中会涉及到发放优惠券，推送环保局，推送云门店，所有业务都是同步执行，接口的响应大概需要2.1秒，随着业务复杂度提高，时间会越来越长。引入MQ之后，注册操作注册成功后，发送消息到MQ。相关的业务自行订阅，各自处理，能够大量降低RT。<br /><img src="http://www.crygcat.top:5661/i/20230804/64cd16dbbdbf9.png" alt="RocketMQ-异步" /></p><h2 id="2-解耦"><a class="markdownIt-Anchor" href="#2-解耦"></a> 2. 解耦</h2><p>一个业务需要多个模块共同实现，或者一条消息有多个系统需要对应处理，只需要主业务完成以后，发送一条MQ，其余模块消费MQ消息，即可实现业务，降低模块之间的耦合</p><h2 id="3-削峰"><a class="markdownIt-Anchor" href="#3-削峰"></a> 3. 削峰</h2><p>高并发情况下，业务异步处理，提供高峰期业务能力，避免系统瘫痪</p><h2 id="4-数据采集"><a class="markdownIt-Anchor" href="#4-数据采集"></a> 4. 数据采集</h2><p>分布式系统会产生大量的数据流，比如业务日志，用户行为等。针对数据流进行批量的采集，汇总可以通过MQ进行。</p><h2 id="5-大规模机器的缓存同步"><a class="markdownIt-Anchor" href="#5-大规模机器的缓存同步"></a> 5. 大规模机器的缓存同步</h2><p>双十一大促时，各个分会场会有玲琅满目的商品，每件商品的价格都会实时变化。使用缓存技术也无法满足对商品价格的访问需求，缓存服务器网卡满载。访问较多次商品价格查询影响会场页面的打开速度。<br />此时需要提供一种<code>广播机制</code>，一条消息本来只可以被集群的一台机器消费，如果使用消息队列RocketMQ的<code>广播消费模式</code>，那么这条消息会被所有节点消费一次，相当于把价格信息同步到需要的每台机器上，<code>取代缓存</code>的作用。</p><hr /><h1 id="三-mq缺点"><a class="markdownIt-Anchor" href="#三-mq缺点"></a> 三、MQ缺点</h1><ol><li>系统可用性降低：系统引入的外部依赖越多，系统稳定性越差。一旦MQ宕机，就会对业务造成影响</li><li>系统的复杂度提高：MQ的加入大大增加了系统的<code>复杂度</code>，以前系统间是同步的远程调用，现在是通过MQ进行<code>异步调用</code>。</li><li>消息一致性问题：A系统处理完业务，通过MQ给B、C、D三个系统发消息数据，如果B系统、C系统处理成功，D系统处理失败</li></ol><hr /><h1 id="四-mq对比"><a class="markdownIt-Anchor" href="#四-mq对比"></a> 四、MQ对比</h1><hr /><h1 id="五-rocketmq基本概念"><a class="markdownIt-Anchor" href="#五-rocketmq基本概念"></a> 五、RocketMQ基本概念</h1><p><img src="http://www.crygcat.top:5661/i/20230804/64cd16da496ee.png" alt="RocketMQ-基本概念" /></p><h2 id="1-消息message"><a class="markdownIt-Anchor" href="#1-消息message"></a> 1. 消息（Message）</h2><p>消息是 Apache RocketMQ 中的<code>最小数据传输单元</code>。生产者将业务数据的负载和拓展属性包装成消息发送到<code>Apache RocketMQ</code>服务端，服务端按照相关语义将消息投递到消费端进行消费。消息具备<code>不可变性</code>，在初始化发送和完成存储后即不可变</p><h2 id="2-主题topic"><a class="markdownIt-Anchor" href="#2-主题topic"></a> 2. 主题（Topic）</h2><p>主题是 Apache RocketMQ 中消息传输和存储的<code>顶层容器</code>，用于标识同一类业务逻辑的消息。<br />主题的主要作用：定义数据的<code>分类隔离</code>，定义数据的身份和权限。主题是一个<code>逻辑概念</code>，并不是实际消息容器，Queue才是消息的实际容器。</p><h2 id="3-队列queue"><a class="markdownIt-Anchor" href="#3-队列queue"></a> 3. 队列（Queue）</h2><p>队列是<code>Apache RocketMQ</code>中消息存储和传输的实际容器，也是<code>Apache RocketMQ</code>消息的<code>最小存储单元</code>。<code>Apache RocketMQ</code>的所有主题都是由<code>多个队列</code>组成，以此实现队列数量的水平拆分和队列内部的流式存储。</p><h2 id="4-生产者producer"><a class="markdownIt-Anchor" href="#4-生产者producer"></a> 4. 生产者（Producer）</h2><p>生产者是<code>Apache RocketMQ</code>系统中用来构建并传输消息到服务端的运行实体。生产者通常被集成在业务系统中，将业务消息按照要求封装成消息并发送至服务端。</p><h2 id="5-消费者consumer"><a class="markdownIt-Anchor" href="#5-消费者consumer"></a> 5. 消费者（Consumer）</h2><p>消费者是<code>Apache RocketMQ</code>中用来接收并处理消息的运行实体。消费者通常被集成在业务系统中，从<code>Apache RocketMQ</code>服务端获取消息，并将消息转化成业务可理解的信息，供业务逻辑处理。消费者必须被指定到某一个消费组中。</p><h2 id="6-消费者分组consumergroup"><a class="markdownIt-Anchor" href="#6-消费者分组consumergroup"></a> 6. 消费者分组（ConsumerGroup）</h2><p>消费者分组是<code>Apache RocketMQ</code>系统中承载多个消费行为一致的消费者的负载均衡分组。<br />和消费者不同，消费者分组并不是运行实体，而是一个<code>逻辑资源</code>。在<code>Apache RocketMQ</code>中，通过消费者分组内初始化多个消费者实现消费性能的水平扩展以及高可用容灾。</p><hr /><h1 id="六-rocketmq系统架构"><a class="markdownIt-Anchor" href="#六-rocketmq系统架构"></a> 六、RocketMQ系统架构</h1><p><img src="http://www.crygcat.top:5661/i/20230804/64cd16dab3715.png" alt="RocketMQ-系统架构" /></p><h2 id="1-nameserver"><a class="markdownIt-Anchor" href="#1-nameserver"></a> 1. NameServer</h2><p><code>NameServer</code>是一个<code>Broker</code>和<code>Topic</code>路由的注册中心，支持<code>Broker</code>的动态注册和发现。</p><h3 id="主要功能"><a class="markdownIt-Anchor" href="#主要功能"></a> 主要功能：</h3><ol><li>Broker管理：接收<code>Broker</code>集群的注册信息并且保存，提供心跳检测机制。</li><li>路由信息管理：每个<code>NameServer</code>都保存着<code>Broker</code>集群的路由信息，和客户端查询的队列信息。<code>Producer</code>和<code>Consumer</code>可以从<code>NameServer</code>中获取到<code>Broker</code>的路由信息，完成消息的投递和消费。</li></ol><h3 id="路由注册"><a class="markdownIt-Anchor" href="#路由注册"></a> 路由注册</h3><p><code>NameServer</code>是<code>无状态</code>的，各节点间不相互通讯。<code>Broker</code>启动时，会轮询<code>NameServer</code>列表，与每个<code>NameServer</code>建立长连接，发起注册请求，<code>NameServer</code>存储每个<code>Broker</code>信息。<br /><code>Broker</code>每隔<code>30s</code>会发送一次心跳包，证明自己还存活着。</p><h3 id="路由剔除"><a class="markdownIt-Anchor" href="#路由剔除"></a> 路由剔除</h3><p><code>NameServer</code>定时任务，每隔<code>10s</code>会轮询遍历一遍<code>Borker</code>最近一次的心跳时间和当前时间是否超过<code>120s</code>。超过就会剔除。</p><h3 id="路由发现"><a class="markdownIt-Anchor" href="#路由发现"></a> 路由发现</h3><p><code>NameServer</code>采用的是<code>pull</code>模型，当<code>Topic</code>发生变化时，<code>NameServer</code>不会主动推送给客户端，而是客户端定时拉取。每隔<code>30s</code>，客户端会拉取一次。</p><blockquote><p>pull模型：拉取模型，实时性差。<br />push模型：服务端压力大<br />long polling: 长轮询,定时建立一个长连接，然后连接保持一段时间后断开。整合了pull和push的优势。</p></blockquote><h3 id="客户端nameserver的选择策略"><a class="markdownIt-Anchor" href="#客户端nameserver的选择策略"></a> 客户端NameServer的选择策略</h3><p>首先采用<code>随机策略</code>，连接失败后，采用<code>轮询策略</code>。<br />随机策略：客户端产生一个随机数，对集群<code>NameServer</code>个数取模，得到<code>NameServer</code>索引，进行连接。</p><h2 id="2-broker"><a class="markdownIt-Anchor" href="#2-broker"></a> 2. Broker</h2><p>消息中转角色，负责存储消息、转发消息。代理服务器在<code>RocketMQ</code>系统中负责接收从生产者发送来的消息并存储、同时为消费者的拉取请求作准备。代理服务器也存储消息相关的元数据，包括消费者组、消费进度偏移和主题和队列消息等。</p>]]></content>
      
      
      <categories>
          
          <category> RocketMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 中间件 </tag>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】学习记录·BigDecimal</title>
      <link href="/posts/c591343f.html"/>
      <url>/posts/c591343f.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-创建-bigdecimal-对象"><a class="markdownIt-Anchor" href="#一-创建-bigdecimal-对象"></a> 一、创建 BigDecimal 对象</h1><p>创建<code>BigDecimal</code>对象常用的方式有2种：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal a = BigDecimal.new Bigdecimal(1);</span><br><span class="line">BigDecimal a1 = BigDecimal.valueOf(1);</span><br></pre></td></tr></table></figure><p>不推荐使用new 关键字创建Bigdecimal对象。原因是当new 的值是一个小数的时候，其真实的值并不是我们想要的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal b = new BigDecimal(1.1);</span><br><span class="line">BigDecimal b1 = BigDecimal.valueOf(1.1);</span><br><span class="line">System.out.println(&quot;new的值b: &quot;+b);</span><br><span class="line">System.out.println(&quot;valueOf()的值b1: &quot;+b1);</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new的值b: 1.100000000000000088817841970012523233890533447265625</span><br><span class="line">valueOf()的值b1: 1.1</span><br></pre></td></tr></table></figure><p>这在比较大小的时候，很可能出现意想不到的结果。</p><h1 id="二-bigdecimal-加减乘除"><a class="markdownIt-Anchor" href="#二-bigdecimal-加减乘除"></a> 二、BigDecimal 加减乘除</h1><p>加法：add()<br />减法：subtract()<br />乘法：multiply()<br />除法：divide()</p><h2 id="1-加法"><a class="markdownIt-Anchor" href="#1-加法"></a> 1. 加法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public BigDecimal add(BigDecimal augend)</span><br><span class="line">public BigDecimal add(BigDecimal augend, MathContext mc)</span><br><span class="line"></span><br><span class="line">MathContext : 设置保留几位小数，舍入按四舍五入</span><br></pre></td></tr></table></figure><p>错误写法：<br />BigDecimal相加返回为0 Result of ‘BigDecimal.add()‘ is ignored</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal investment = new BigDecimal(&quot;0.00&quot;);</span><br><span class="line">investment.add(new BigDecimal(&quot;100.00&quot;));</span><br><span class="line">System.out.print(&quot;investment:&quot; + investment); //0.00</span><br></pre></td></tr></table></figure><p>正确写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal investment = new BigDecimal(&quot;0.00&quot;);</span><br><span class="line">investment = investment.add( new BigDecimal(&quot;100.00&quot;));</span><br><span class="line">System.out.print(&quot;investment:&quot; + investment);//100.00</span><br></pre></td></tr></table></figure><h2 id="2-减法"><a class="markdownIt-Anchor" href="#2-减法"></a> 2. 减法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public BigDecimal subtract(BigDecimal subtrahend)</span><br><span class="line">public BigDecimal subtract(BigDecimal subtrahend, MathContext mc)</span><br><span class="line"></span><br><span class="line">MathContext : 设置保留几位小数，舍入按四舍五入</span><br></pre></td></tr></table></figure><h2 id="3-乘法"><a class="markdownIt-Anchor" href="#3-乘法"></a> 3. 乘法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public BigDecimal multiply(BigDecimal multiplicand)</span><br><span class="line">public BigDecimal multiply(BigDecimal multiplicand, MathContext mc)</span><br><span class="line"></span><br><span class="line">MathContext : 设置保留几位小数，舍入按四舍五入</span><br></pre></td></tr></table></figure><h2 id="4-除法"><a class="markdownIt-Anchor" href="#4-除法"></a> 4. 除法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public BigDecimal divide(BigDecimal divisor)</span><br><span class="line">public BigDecimal divide(BigDecimal divisor, MathContext mc)</span><br><span class="line">public BigDecimal divide(BigDecimal divisor, int roundingMode)</span><br><span class="line">public BigDecimal divide(BigDecimal divisor, RoundingMode roundingMode)</span><br><span class="line">public BigDecimal divide(BigDecimal divisor, int scale, RoundingMode roundingMode)</span><br><span class="line">public BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)</span><br></pre></td></tr></table></figure><p>其中<code>public BigDecimal divide(BigDecimal divisor)</code>不推荐使用。idea警告如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Inspection info: Reports calls to divide() or setScale() without a rounding mode argument. Such calls can lead to an ArithmeticException when the exact value cannot be represented in the result (e.g. because it has a non-terminating decimal expansion). Specifying a rounding mode prevents the ArithmeticException.</span><br><span class="line"></span><br><span class="line">翻译:</span><br><span class="line">检查信息:报告调用divide()或setScale()，而不带舍入模式参数。当结果中不能表示精确值时，这种调用可能导致算术异常(例如，因为它具有无限的十进制展开)。指定舍入模式可以防止算术异常。</span><br><span class="line"></span><br><span class="line">简单点说就是除不尽的时候会报错</span><br></pre></td></tr></table></figure><p>所以用除法的时候，我们需要指定其舍入模式。推荐使用:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public BigDecimal divide(BigDecimal divisor, int scale, RoundingMode roundingMode)</span><br><span class="line">public BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)</span><br><span class="line"></span><br><span class="line">scale : 保留几位小数</span><br><span class="line">RoundingMode : 指定舍入模式</span><br></pre></td></tr></table></figure><p>Demo：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal divide = a.divide(b, 2, RoundingMode.DOWN);</span><br><span class="line">System.out.println(&quot;divide: &quot;+divide);</span><br></pre></td></tr></table></figure><h1 id="三-判断-bigdecimal-大于0-小于0和等于0"><a class="markdownIt-Anchor" href="#三-判断-bigdecimal-大于0-小于0和等于0"></a> 三、判断 BigDecimal 大于0、小于0和等于0</h1><p>使用 <code>compareTo(Bigdecimal bigdecimal)</code>，传入<code>BigDecimal.ZERO</code>返回<code>0</code>表示等于0，返回<code>1</code>表示大于0，返回<code>-1</code>表示小于0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(&quot;0-0=&quot;+new BigDecimal(&quot;0&quot;).compareTo(BigDecimal.ZERO));  </span><br><span class="line">System.out.println(&quot;0.0-0=&quot;+new BigDecimal(&quot;0.0&quot;).compareTo(BigDecimal.ZERO));  </span><br><span class="line">System.out.println(&quot;0.00-0=&quot;+new BigDecimal(&quot;0.00&quot;).compareTo(BigDecimal.ZERO));  </span><br><span class="line">System.out.println(&quot;0.000-0=&quot;+new BigDecimal(&quot;0.000&quot;).compareTo(BigDecimal.ZERO));  </span><br><span class="line">System.out.println(&quot;0.00001-0=&quot;+new BigDecimal(&quot;0.00001&quot;).compareTo(BigDecimal.ZERO));  </span><br><span class="line">System.out.println(&quot;0.0000001-0=&quot;+new BigDecimal(&quot;0.0000001&quot;).compareTo(BigDecimal.ZERO));  </span><br><span class="line">System.out.println(&quot;-0.00001-0=&quot;+new BigDecimal(&quot;-0.00001&quot;).compareTo(BigDecimal.ZERO));  </span><br><span class="line">System.out.println(&quot;-0.0000001-0=&quot;+new BigDecimal(&quot;-0.0000001&quot;).compareTo(BigDecimal.ZERO));</span><br><span class="line">返回：</span><br><span class="line">0-0=0</span><br><span class="line">0.0-0=0</span><br><span class="line">0.00-0=0</span><br><span class="line">0.000-0=0</span><br><span class="line">0.00001-0=1</span><br><span class="line">0.0000001-0=1</span><br><span class="line">-0.00001-0=-1</span><br><span class="line">-0.0000001-0=-1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Markdown】Markdown常用语法总结</title>
      <link href="/posts/7fce6291.html"/>
      <url>/posts/7fce6291.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-简介"><a class="markdownIt-Anchor" href="#一-简介"></a> 一、简介</h1><p><code>Markdown</code>是一种轻量级标记语言，它用简洁的语法代替排版，使我们专心于码字。它的目标是实现易读易写，成为一种适用于网络的书写语言。同时，<code>Markdown</code>支持嵌入<code>html</code>标签。</p><h2 id="1-markdown历史"><a class="markdownIt-Anchor" href="#1-markdown历史"></a> 1. Markdown历史：</h2><p><code>Markdown</code>由<code>John Gruber</code>在<code>2004年</code>创建。其中在语法上有很大一部分是跟<code>Aaron Swartz</code>共同合作的。</p><p><code>Aaron Swartz</code>就是那位于<code>2013年</code>自杀，有着开挂一般人生经历的程序员。维基百科对他的介绍是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。</p><p>他有着足以让你跪拜的人生经历：</p><p><code>14岁</code>参与<code>RSS 1.0</code>规格标准的制订。<br /><code>2004年</code>入读斯坦福，之后退学。<br /><code>2005年</code>创建<code>Infogami</code>，之后与<code>Reddit</code>合并成为其合伙人。<br /><code>2010年</code>创立<code>求进会（Demand Progress）</code>，积极参与禁止网络盗版法案（SOPA）活动，最终该提案居然被撤回。<br /><code>2011年7月19日</code>，因被控从<code>MIT</code>和<code>JSTOR</code>下载480万篇学术论文并以免费形式上传于网络被捕。<br /><code>2013年1月</code>自杀身亡。</p><h2 id="2-markdown优势"><a class="markdownIt-Anchor" href="#2-markdown优势"></a> 2. Markdown优势：</h2><ol><li>方便编辑。任何一个文本编辑器就可以编辑，连大家熟悉的Windows记事本也可以。让编写者专注于内容，而不是格式。是否有为了调整不听话的编辑器（好吧，我说的就是word）的格式而浪费大量时间的经历？</li><li>可以放到版本管理系统中，追踪历史变更。这对码农们来说太重要了，这样文档可以和程序代码一起放版本管理系统中了。如果你不清楚版本管理系统，只需要把它理解成可以永久追踪的修改历史记录即可（版本管理系统可以另开一篇文章了）。这样，多人协作编辑的时候，也不用担心文档被改坏了。</li></ol><h2 id="3-markdown使用注意"><a class="markdownIt-Anchor" href="#3-markdown使用注意"></a> 3. Markdown使用注意：</h2><p><code>Markdown</code>使用<code>#</code>、<code>+</code>、<code>*</code>等符号来标记， 符号后面必须跟上至少1个空格才有效！</p><hr /><h1 id="二-标题"><a class="markdownIt-Anchor" href="#二-标题"></a> 二、标题</h1><h2 id="1-用标记"><a class="markdownIt-Anchor" href="#1-用标记"></a> 1. 用<code>#</code>标记</h2><p><strong>说明：</strong><br />在<code>标题开头</code>加上1~6个<code>#</code>，依次代表一级标题、二级标题…六级标题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><blockquote><h1 id="一级标题"><a class="markdownIt-Anchor" href="#一级标题"></a> 一级标题</h1><h2 id="二级标题"><a class="markdownIt-Anchor" href="#二级标题"></a> 二级标题</h2><h3 id="三级标题"><a class="markdownIt-Anchor" href="#三级标题"></a> 三级标题</h3><h4 id="四级标题"><a class="markdownIt-Anchor" href="#四级标题"></a> 四级标题</h4><h5 id="五级标题"><a class="markdownIt-Anchor" href="#五级标题"></a> 五级标题</h5><h6 id="六级标题"><a class="markdownIt-Anchor" href="#六级标题"></a> 六级标题</h6></blockquote><h2 id="2-用和-标记"><a class="markdownIt-Anchor" href="#2-用和-标记"></a> 2. 用<code>=</code>和<code>-</code>标记</h2><p><strong>说明：</strong><br />在<code>标题底下</code>加上任意个<code>=</code>代表一级标题，<code>-</code>代表二级标题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一级标题</span><br><span class="line">======</span><br><span class="line"></span><br><span class="line">二级标题</span><br><span class="line">----------</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><blockquote><h1 id="一级标题-2"><a class="markdownIt-Anchor" href="#一级标题-2"></a> 一级标题</h1><h2 id="二级标题-2"><a class="markdownIt-Anchor" href="#二级标题-2"></a> 二级标题</h2></blockquote><hr /><h1 id="三-列表"><a class="markdownIt-Anchor" href="#三-列表"></a> 三、列表</h1><h2 id="1-无序列表"><a class="markdownIt-Anchor" href="#1-无序列表"></a> 1. 无序列表</h2><p><strong>说明：</strong><br />使用<code>-</code>、<code>+</code>和<code>*</code>作为列表标记</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- Red</span><br><span class="line">- Green</span><br><span class="line">- Blue</span><br><span class="line"></span><br><span class="line">* Red</span><br><span class="line">* Green</span><br><span class="line">* Blue</span><br><span class="line"></span><br><span class="line">+ Red</span><br><span class="line">+ Green</span><br><span class="line">+ Blue</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><blockquote><ul><li>Red</li><li>Green</li><li>Blue</li></ul></blockquote><h2 id="2-有序列表"><a class="markdownIt-Anchor" href="#2-有序列表"></a> 2. 有序列表</h2><p><strong>说明：</strong><br />使用数字加英文句点<code>.</code>来表示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Red</span><br><span class="line">2. Green</span><br><span class="line">3. Blue</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><blockquote><ol><li>Red</li><li>Green</li><li>Blue</li></ol></blockquote><h2 id="3-列表嵌套"><a class="markdownIt-Anchor" href="#3-列表嵌套"></a> 3. 列表嵌套</h2><p><strong>说明：</strong><br />列表嵌套只需要在子列表选项的前面添加<code>4</code>个空格即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* 无序列表1</span><br><span class="line">    1. 有序列表1.1</span><br><span class="line">    2. 有序列表1.2</span><br><span class="line">* 无序列表2</span><br><span class="line">    - 无序列表2.1</span><br><span class="line">    - 无序列表2.2</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><blockquote><ul><li>无序列表1<ol><li>有序列表1.1</li><li>有序列表1.2</li></ol></li><li>无序列表2<ul><li>无序列表2.1</li><li>无序列表2.2</li></ul></li></ul></blockquote><hr /><h1 id="四-引用"><a class="markdownIt-Anchor" href="#四-引用"></a> 四、引用</h1><p><strong>说明：</strong><br />引用以<code>&gt;</code>来表示，引用中支持多级引用、标题、列表、代码块、分割线等常规语法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是一段引用    //在`&gt;`后面有 1 个空格</span><br><span class="line">&gt; </span><br><span class="line">&gt;     这是引用的代码块形式    //在`&gt;`后面有 5 个空格</span><br><span class="line">&gt;     </span><br><span class="line">&gt; 代码例子（代码未放引用）：</span><br><span class="line">&gt;   </span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&gt; 一级引用</span><br><span class="line">&gt; &gt; 二级引用</span><br><span class="line">&gt; &gt; &gt; 三级引用</span><br><span class="line"></span><br><span class="line">&gt; #### 这是一个四级标题</span><br><span class="line">&gt; </span><br><span class="line">&gt; 1. 这是第一行列表项</span><br><span class="line">&gt; 2. 这是第二行列表项</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><blockquote><p>这是一段引用    //在<code>&gt;</code>后面有 1 个空格</p><pre><code>这是引用的代码块形式    //在`&gt;`后面有 5 个空格</code></pre><p>代码例子（代码未放引用）：</p></blockquote><pre><code>protected void onCreate(Bundle savedInstanceState) &#123;    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);&#125;</code></pre><blockquote><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级引用</p></blockquote></blockquote></blockquote><blockquote><h4 id="这是一个四级标题"><a class="markdownIt-Anchor" href="#这是一个四级标题"></a> 这是一个四级标题</h4><ol><li>这是第一行列表项</li><li>这是第二行列表项</li></ol></blockquote><hr /><h1 id="五-强调"><a class="markdownIt-Anchor" href="#五-强调"></a> 五、强调</h1><p><strong>说明：</strong><br />两个<code>*</code>或<code>-</code>代表加粗，一个<code>*</code>或<code>-</code>代表斜体，<code>~~</code>代表删除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*斜体文本* 或者 _斜体文本_</span><br><span class="line"></span><br><span class="line">**加粗文本** 或者 __加粗文本__</span><br><span class="line"></span><br><span class="line">***粗斜体文本*** 或者 ___粗斜体文本___</span><br><span class="line"></span><br><span class="line">~~删除文本~~</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><blockquote><p><em>斜体文本</em>  或者_斜体文本_<br /><strong>加粗文本</strong> 或者 <strong>加粗文本</strong><br /><em><strong>粗斜体文本</strong></em> 或者 <em><strong>粗斜体文本</strong></em><br /><s>删除文本</s></p></blockquote><hr /><h1 id="六-图片与链接"><a class="markdownIt-Anchor" href="#六-图片与链接"></a> 六、图片与链接</h1><p><strong>说明：</strong><br />图片与链接的语法很像，区别在一个<code>!</code>号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">图片：![]()    ![图片文本(可忽略)](图片地址)</span><br><span class="line"></span><br><span class="line">链接：[]()     [链接文本](链接地址)</span><br></pre></td></tr></table></figure><p>链接又分为<code>行内式</code>、<code>参考式</code>和<code>自动链接</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">这是行内式链接：[ConnorLin&#x27;s Blog](http://connorlin.github.io)。</span><br><span class="line"></span><br><span class="line">这是参考式链接：[ConnorLin&#x27;s Blog][url]，其中url为链接标记，可置于文中任意位置。</span><br><span class="line">[url]: http://connorlin.github.io/ &quot;ConnorLin&#x27;s Blog&quot;</span><br><span class="line">链接标记格式为：[链接标记文本]:  链接地址  链接title(可忽略)</span><br><span class="line"></span><br><span class="line">这是自动链接：直接使用&#x27;&lt;&gt;&#x27;括起来&lt;http://connorlin.github.io&gt;</span><br><span class="line"></span><br><span class="line">这是图片：![][avatar]</span><br><span class="line">[avatar]: https://connorlin.github.io/images/avatar.jpg</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><blockquote><p>这是行内式链接：<a href="http://connorlin.github.io">ConnorLin’s Blog</a>。</p><p>这是参考式链接：[ConnorLin’s Blog][url]，其中url为链接标记，可置于文中任意位置。<br />[url]: <a href="http://connorlin.github.io/">http://connorlin.github.io/</a> “ConnorLin’s Blog”<br />链接标记格式为：[链接标记文本]:  链接地址  链接title(可忽略)</p><p>这是自动链接：直接使用<code>&lt;&gt;</code>括起来<a href="http://connorlin.github.io">http://connorlin.github.io</a></p><p>这是图片：![][avatar]<br />[avatar]: <a href="https://connorlin.github.io/images/avatar.jpg">https://connorlin.github.io/images/avatar.jpg</a></p></blockquote><hr /><h1 id="七-代码"><a class="markdownIt-Anchor" href="#七-代码"></a> 七、代码</h1><p><strong>说明：</strong><br />代码分为行内代码和代码块。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">行内代码使用 `代码` 标识，可嵌入文字中</span><br><span class="line"></span><br><span class="line">代码块使用4个空格或```标识</span><br><span class="line"></span><br><span class="line">代码语法高亮在```后面加上空格和语言名称即可</span><br></pre></td></tr></table></figure><hr /><h1 id="八-表格"><a class="markdownIt-Anchor" href="#八-表格"></a> 八、表格</h1><p>表格对齐格式</p><ul><li>居左：:----</li><li>居中：:----:或-----</li><li>居右：----:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|标题|标题|标题|</span><br><span class="line">|:---|:---:|---:|</span><br><span class="line">|居左测试文本|居中测试文本|居右测试文本|</span><br><span class="line">|居左测试文本1|居中测试文本2|居右测试文本3|</span><br><span class="line">|居左测试文本11|居中测试文本22|居右测试文本33|</span><br><span class="line">|居左测试文本111|居中测试文本222|居右测试文本333|</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><blockquote><table><thead><tr><th style="text-align:left">标题</th><th style="text-align:center">标题</th><th style="text-align:right">标题</th></tr></thead><tbody><tr><td style="text-align:left">居左测试文本</td><td style="text-align:center">居中测试文本</td><td style="text-align:right">居右测试文本</td></tr><tr><td style="text-align:left">居左测试文本1</td><td style="text-align:center">居中测试文本2</td><td style="text-align:right">居右测试文本3</td></tr><tr><td style="text-align:left">居左测试文本11</td><td style="text-align:center">居中测试文本22</td><td style="text-align:right">居右测试文本33</td></tr><tr><td style="text-align:left">居左测试文本111</td><td style="text-align:center">居中测试文本222</td><td style="text-align:right">居右测试文本333</td></tr></tbody></table></blockquote><hr /><h1 id="九-分隔线"><a class="markdownIt-Anchor" href="#九-分隔线"></a> 九、分隔线</h1><p><strong>说明：</strong><br />在一行中用三个以上的<code>*</code>、<code>-</code>、<code>_</code>来建立一个分隔线，行内不能有其他东西。也可以在符号间插入空格。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">---</span><br><span class="line">___</span><br><span class="line"></span><br><span class="line">* * *</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><blockquote><hr /><hr /></blockquote><hr /><h1 id="十-换行"><a class="markdownIt-Anchor" href="#十-换行"></a> 十、换行</h1><hr /><h1 id="十一-脚注注解"><a class="markdownIt-Anchor" href="#十一-脚注注解"></a> 十一、脚注(注解)</h1><p><strong>说明：</strong><br />使用<code>[^]</code>来定义脚注</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是一个脚注的例子[^1]</span><br><span class="line"></span><br><span class="line">[^1]: 这里是脚注</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><blockquote><p>这是一个脚注的例子<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p></blockquote><hr /><h1 id="十二-高级技巧"><a class="markdownIt-Anchor" href="#十二-高级技巧"></a> 十二、高级技巧</h1><h2 id="1-html元素"><a class="markdownIt-Anchor" href="#1-html元素"></a> 1. HTML元素</h2><p>不在<code>Markdown</code>涵盖范围之内的标签，都可以直接在文档里面用<code>HTML</code>撰写。 目前支持的<code>HTML</code>元素有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;Alt&lt;/kbd&gt; + &lt;kbd&gt;Del&lt;/kbd&gt; 来重启电脑   </span><br><span class="line">&lt;b&gt;加粗的字体&lt;/b&gt;   </span><br><span class="line">&lt;i&gt;斜体字&lt;/i&gt;</span><br><span class="line">&lt;em&gt;强调文本&lt;/em&gt;</span><br><span class="line">这个文本包含&lt;sup&gt;上标&lt;/sup&gt;文本</span><br><span class="line">这个文本包含&lt;sub&gt;下标&lt;/sub&gt;文本</span><br><span class="line">使用 br 元素&lt;br&gt;在文本中&lt;br&gt;换行</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><blockquote><p>使用 <kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>Del</kbd> 来重启电脑<br /><b>加粗的字体</b><br /><i>斜体字</i><br /><em>强调文本</em><br />这个文本包含<sup>上标</sup>文本<br />这个文本包含<sub>下标</sub>文本<br />使用 br 元素<br>在文本中<br>换行</p></blockquote><h3 id="字体"><a class="markdownIt-Anchor" href="#字体"></a> 字体</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;font face=&quot;微软雅黑&quot; color=&quot;red&quot; size=&quot;6&quot;&gt;字体及字体颜色和大小&lt;/font&gt;</span><br><span class="line">&lt;font color=&quot;#0000ff&quot;&gt;字体颜色&lt;/font&gt;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><blockquote><p><font face="微软雅黑" color="red" size="6">字体及字体颜色和大小</font><br /><font color="#0000ff">字体颜色</font></p></blockquote><h3 id="文本对齐方式"><a class="markdownIt-Anchor" href="#文本对齐方式"></a> 文本对齐方式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p align=&quot;left&quot;&gt;居左文本&lt;/p&gt;</span><br><span class="line">&lt;p align=&quot;center&quot;&gt;居中文本&lt;/p&gt;</span><br><span class="line">&lt;p align=&quot;right&quot;&gt;居右文本&lt;/p&gt;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><blockquote><p align="left">居左文本</p><p align="center">居中文本</p><p align="right">居右文本</p></blockquote><h3 id="下划线"><a class="markdownIt-Anchor" href="#下划线"></a> 下划线</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;下划线文本&lt;/u&gt;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><blockquote><p><u>下划线文本</u></p></blockquote><h2 id="2-转义"><a class="markdownIt-Anchor" href="#2-转义"></a> 2. 转义</h2><p><code>Markdown</code>使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，<code>Markdown</code>使用反斜杠转义特殊字符。<br /><code>Markdown</code>支持对以下特殊符号的转义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   下划线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  小括号</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   感叹号</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**文本加粗** </span><br><span class="line">\*\* 正常显示星号 \*\*</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><blockquote><p><strong>文本加粗</strong><br />** 正常显示星号 **</p></blockquote><h2 id="3-数学公式"><a class="markdownIt-Anchor" href="#3-数学公式"></a> 3. 数学公式</h2><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符<code>$$</code>包裹<code>TeX</code>或<code>LaTeX</code>格式的数学公式来实现。提交后，问答和文章页会根据需要加载<code>Mathjax</code>对数学公式进行渲染</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 = </span><br><span class="line">\begin&#123;vmatrix&#125; </span><br><span class="line">\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp; \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp; \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\</span><br><span class="line">\end&#123;vmatrix&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><blockquote><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi mathvariant="bold">V</mi><mn>1</mn></msub><mo>×</mo><msub><mi mathvariant="bold">V</mi><mn>2</mn></msub><mo>=</mo><mrow><mo fence="true">∣</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="bold">i</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="bold">j</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="bold">k</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>X</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>u</mi></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>Y</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>u</mi></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>X</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>v</mi></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>Y</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>v</mi></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow></mrow><annotation encoding="application/x-tex">\mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix} \mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \\\frac{\partial X}{\partial u} &amp; \frac{\partial Y}{\partial u} &amp; 0 \\\frac{\partial X}{\partial v} &amp; \frac{\partial Y}{\partial v} &amp; 0 \\\end{vmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83611em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83611em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">V</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.682068em;vertical-align:-1.590108em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0919600000000003em;"><span style="top:-1.05597em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.65697em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.2579700000000003em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.8589700000000002em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.45997em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.4909600000000003em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.09196em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500299999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.090108em;"><span style="top:-4.250108em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">i</span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight">u</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.769892em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.590108em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.090108em;"><span style="top:-4.250108em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">j</span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight">u</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.769892em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.590108em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.090108em;"><span style="top:-4.250108em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">k</span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.769892em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.590108em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0919600000000003em;"><span style="top:-1.05597em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.65697em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.2579700000000003em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.8589700000000002em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.45997em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.4909600000000003em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.09196em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500299999999998em;"><span></span></span></span></span></span></span></span></span></span></span></span></p></blockquote><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>这里是脚注 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】Hexo Butterfly魔改参考</title>
      <link href="/posts/298e2506.html"/>
      <url>/posts/298e2506.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-操作"><a class="markdownIt-Anchor" href="#一-操作"></a> 一、操作</h1><h2 id="1-鼠标样式"><a class="markdownIt-Anchor" href="#1-鼠标样式"></a> 1. 鼠标样式</h2><blockquote><p>参考：<a href="https://moonshuo.cn/posts/1481.html#%E9%BC%A0%E6%A0%87%E6%A0%B7%E5%BC%8F%E6%9B%B4%E6%94%B9">偷掉月亮 - 鼠标样式更改</a></p></blockquote><h1 id="二-导航栏"><a class="markdownIt-Anchor" href="#二-导航栏"></a> 二、导航栏</h1><blockquote><p>参考：<a href="https://yisous.xyz/posts/895003b5/">Ariasakaの小窝 - 导航栏魔改教程</a></p></blockquote><h1 id="三-归档页卡片"><a class="markdownIt-Anchor" href="#三-归档页卡片"></a> 三、归档页卡片</h1><blockquote><p>参考：<a href="https://ichika.cc/Article/beautiful_MyBeautiful/#%E5%BD%92%E6%A1%A3%E3%80%81%E6%A0%87%E7%AD%BE%E3%80%81%E5%88%86%E7%B1%BB%E9%A1%B5%E5%8D%A1%E7%89%87">ichikaの小窝 - 归档、标签、分类页卡片</a></p></blockquote><div class='tag-Link'><a class="tag-Link" target="_blank" href=" https://ichika.cc/Article/beautiful_MyBeautiful/#归档、标签、分类页卡片">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/ https://ichika.cc/Article/beautiful_MyBeautiful/#归档、标签、分类页卡片.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">归档、标签、分类页卡片</div>            <div class="tag-link-sitename"> ichikaの小窝</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></div><h1 id="四-侧边栏"><a class="markdownIt-Anchor" href="#四-侧边栏"></a> 四、侧边栏</h1><h2 id="归档修改"><a class="markdownIt-Anchor" href="#归档修改"></a> 归档修改</h2><blockquote><p>参考：<a href="https://anzhiy.cn/posts/sdxhu.html#%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%BD%92%E6%A1%A3%E4%BF%AE%E6%94%B9">安知鱼 - 侧边栏归档修改</a></p></blockquote><h2 id="五-最近文章修改"><a class="markdownIt-Anchor" href="#五-最近文章修改"></a> 五、最近文章修改</h2><blockquote><p>参考：<a href="https://anzhiy.cn/posts/sdxhu.html">安知鱼 - 侧边栏最近文章修改</a></p></blockquote><h1 id="六-页脚"><a class="markdownIt-Anchor" href="#六-页脚"></a> 六、页脚</h1><blockquote><p>参考：<a href="https://ichika.cc/Article/beautiful_MyBeautiful/#%E9%A1%B5%E8%84%9A">ichikaの小窝 - 页脚</a></p></blockquote><h1 id="七-网址"><a class="markdownIt-Anchor" href="#七-网址"></a> 七、网址</h1><h2 id="1-网址卡片外挂标签"><a class="markdownIt-Anchor" href="#1-网址卡片外挂标签"></a> 1. 网址卡片外挂标签</h2><blockquote><p>参考：<a href="https://blog.zhheo.com/p/ccaf9148.html">HEO - 网址卡片外挂标签</a></p></blockquote><h1 id="八-文章"><a class="markdownIt-Anchor" href="#八-文章"></a> 八、文章</h1><h2 id="1-每页单独配置背景图"><a class="markdownIt-Anchor" href="#1-每页单独配置背景图"></a> 1. 每页单独配置背景图</h2><blockquote><p>参考：<a href="https://anzhiy.cn/posts/sdxhu.html#%E6%AF%8F%E9%A1%B5%E5%8D%95%E7%8B%AC%E9%85%8D%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE">安知鱼 - 每页单独配置背景图</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工具】实用在线网站推荐（持续更新）</title>
      <link href="/posts/adfe9c7d.html"/>
      <url>/posts/adfe9c7d.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-综合功能网站"><a class="markdownIt-Anchor" href="#一-综合功能网站"></a> 一、综合功能网站</h1><h2 id="1-致美化"><a class="markdownIt-Anchor" href="#1-致美化"></a> 1. 致美化</h2><p>致美化网内，有非常多的免费资源，包括但不限于壁纸、字体、鼠标样式等<br />网站地址：<a href="https://zhutix.com/">https://zhutix.com/</a><br /><img src="http://www.crygcat.top:5661/i/20230804/64cd18aedfdf1.png" alt="致美化" /></p><h1 id="二-图片素材网站"><a class="markdownIt-Anchor" href="#二-图片素材网站"></a> 二、图片素材网站</h1><h2 id="1-花瓣网"><a class="markdownIt-Anchor" href="#1-花瓣网"></a> 1. 花瓣网</h2><p>网站地址：<a href="https://huaban.com">花瓣网</a><br /><img src="http://www.crygcat.top:5661/i/20230804/64cd18ad063ed.png" alt="花瓣网" /></p><h2 id="2-二次元随机图"><a class="markdownIt-Anchor" href="#2-二次元随机图"></a> 2. 二次元随机图</h2><p>网站地址：<a href="https://t.mwm.moe">举个栗子-二次元随机图片API</a></p><h1 id="三-文件格式转换器"><a class="markdownIt-Anchor" href="#三-文件格式转换器"></a> 三、文件格式转换器</h1><h2 id="1-convertio"><a class="markdownIt-Anchor" href="#1-convertio"></a> 1. Convertio</h2><p>可对多种文件格式进行在线转换，但未注册买套餐的用户，一天只能进行限量的文件转换<br />网站地址：<a href="https://convertio.co/zh/">https://convertio.co/zh/</a><br /><img src="http://www.crygcat.top:5661/i/20230804/64cd18ad5db32.png" alt="文件转换器界面" /></p><p>有非常多的文件格式可以选择，涉及到的领域也很多<br /><img src="http://www.crygcat.top:5661/i/20230804/64cd18ae4ba35.png" alt="多种文件转换格式" /></p><h1 id="四-配色网站"><a class="markdownIt-Anchor" href="#四-配色网站"></a> 四、配色网站</h1><h2 id="1-中国色"><a class="markdownIt-Anchor" href="#1-中国色"></a> 1. 中国色</h2><p><a href="http://zhongguose.com/#jianshilan">http://zhongguose.com/#jianshilan</a></p><h2 id="2-日本传统配色"><a class="markdownIt-Anchor" href="#2-日本传统配色"></a> 2. 日本传统配色</h2><p><a href="https://nipponcolors.com/#tsuyukusa">https://nipponcolors.com/#tsuyukusa</a></p><h1 id="五-代码相关"><a class="markdownIt-Anchor" href="#五-代码相关"></a> 五、代码相关</h1><h2 id="1-linuxize"><a class="markdownIt-Anchor" href="#1-linuxize"></a> 1. Linuxize</h2><p>各种教程类，包括安装和命令行指令<br /><a href="https://linuxize.com/post/ifconfig-command/">https://linuxize.com/post/ifconfig-command/</a></p><h2 id="2-技术文章摘要"><a class="markdownIt-Anchor" href="#2-技术文章摘要"></a> 2. 技术文章摘要</h2><p>多种技术文章归总，课程归总<br /><a href="https://learn.lianglianglee.com/">https://learn.lianglianglee.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 持续更新 </tag>
            
            <tag> 工具 </tag>
            
            <tag> 实用 </tag>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】学习记录·Stream</title>
      <link href="/posts/8171c465.html"/>
      <url>/posts/8171c465.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-简介"><a class="markdownIt-Anchor" href="#一-简介"></a> 一、简介</h1><p>Stream 将要处理的元素集合看作一种流，在流的过程中，借助<code>Stream API</code>对流中的元素进行操作，比如：筛选、排序、聚合等。</p><p>Stream 流的概述</p><blockquote><p>Stream 流操作是 Java 8 提供一个重要新特性，它允许开发人员以声明性方式处理集合，其核心类库主要改进了对集合类的 API 和新增 Stream 操作。Stream 类中每一个方法都对应集合上的一种操作。将真正的函数式编程引入到 Java 中，能 让代码更加简洁，极大地简化了集合的处理操作，提高了开发的效率和生产力。<br />同时 Stream 不是一种数据结构，它只是某种数据源的一个视图，数据源可以是一个数组，Java 容器或I/O channel等。在 Stream 中的操作每一次都会产生新的流，内部不会像普通集合操作一样立刻获取值，而是<code>惰性取值</code>，只有等到用户真正需要结果的时候才会执行。并且对于现在调用的方法，本身都是一种高层次构件，与线程模型无关。因此在并行使用中，开发者们无需再去操心线程和锁了。Stream 内部都已经做好了 。<br />关于对 Stream 流的理解，你可以把他当成工厂中的流水线，每个 Stream 流的操作过程遵循着创建 --&gt;操作 --&gt;获取结果的过程，就像流水线上的节点一样组成一个个链条。除此之外你还可以把他理解成 sql 的视图，集合就相当于数据表中的数据，获取 Stream 流的过程就是确定数据表的属性和元数据的过程，元数据的每一个元素就是表中的数据，对 Stream 流进行操作的过程就是通过 sql 对这些数据进行查找、过滤、组合、计算、操作、分组等过程，获取结果就是 sql 执行完毕之后获取的结果视图一样，深入理解 Stream 流可以让我们使用更加简洁的代码获取自己想要的数据。</p></blockquote><p>Stream 流是<code>Java8</code>为<code>Collection类</code>新增的一种功能，利用Stream，我们可以</p><ol><li>不写 for 循环，而遍历整个<code>Collection</code>，且速度更快</li><li>替换 Collection 中的成员（类型和值都可以替换）</li><li>收集替换结果，然后将原<code>Collection</code>类转为任意想要的新<code>Collection</code>类</li></ol><p>Stream 可以由数组或集合创建，对流的操作分为两种：</p><ol><li><strong>中间操作</strong>：会返回一个流，通过这种方式可以将多个中间操作连接起来，形成一个调用链，从而转换为另外 一个流。除非调用链后存在一个终端操作，否则中间操作对流不会进行任何结果处理。</li><li><strong>终端操作</strong>：每个流只能进行一次终端操作，终端操作结束后流无法再次使用。终端操作会产生一个新的集合或值，会返回一个具体的结果，如<code>boolean</code>、<code>list</code>、<code>integer</code>等。</li></ol><p>Stream 特性：</p><ol><li>Stream 不存储数据，而是按照特定的规则对数据进行计算，一般会输出结果。</li><li>Stream 不会改变数据源，通常情况下会产生一个新的集合或一个值。</li><li>Stream 具有延迟执行特性，只有调用终端操作时，中间操作才会执行。</li></ol><hr /><h1 id="二-创建"><a class="markdownIt-Anchor" href="#二-创建"></a> 二、创建</h1><p>如果是数组的话，可以使用<code>Arrays.stream()</code>或者<code>Stream.of()</code>创建流；如果是集合的话，可以直接使用<code>stream()</code>方法创建流，因为该方法已经添加到 Collection 接口中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class CreateStreamDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String[] arr = new String[]&#123;&quot;武汉加油&quot;, &quot;中国加油&quot;, &quot;世界加油&quot;&#125;;</span><br><span class="line">        Stream&lt;String&gt; stream = Arrays.stream(arr);</span><br><span class="line"></span><br><span class="line">        stream = Stream.of(&quot;武汉加油&quot;, &quot;中国加油&quot;, &quot;世界加油&quot;);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        list.add(&quot;武汉加油&quot;);</span><br><span class="line">        list.add(&quot;中国加油&quot;);</span><br><span class="line">        list.add(&quot;世界加油&quot;);</span><br><span class="line">        stream = list.stream();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看 Stream 源码的话，你会发现<code>of()</code>方法内部其实调用了<code>Arrays.stream()</code>方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static&lt;T&gt; Stream&lt;T&gt; of(T... values) &#123;</span><br><span class="line">    return Arrays.stream(values);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，集合还可以调用<code>parallelStream()</code>方法创建并发流，默认使用的是<code>ForkJoinPool.commonPool()</code>线程池。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Long&gt; aList = new ArrayList&lt;&gt;();</span><br><span class="line">Stream&lt;Long&gt; parallelStream = aList.parallelStream();</span><br></pre></td></tr></table></figure><h1 id="三-使用"><a class="markdownIt-Anchor" href="#三-使用"></a> 三、使用</h1><h2 id="1-遍历匹配foreachfindmatch"><a class="markdownIt-Anchor" href="#1-遍历匹配foreachfindmatch"></a> 1. 遍历/匹配(foreach/find/match)</h2><blockquote><p>match：</p><ul><li>anyMatch()：只要有一个元素匹配传入的条件，就返回 true。</li><li>allMatch()：只有有一个元素不匹配传入的条件，就返回 false；如果全部匹配，则返回 true。</li><li>noneMatch()：只要有一个元素匹配传入的条件，就返回 false；如果全部匹配，则返回 true。</li></ul></blockquote><p>Stream 也是支持类似集合的遍历和匹配元素的，只是 Stream 中的元素是以<code>Optional</code>类型存在的。Stream 的遍历、匹配非常简单。<br /><img src="http://www.crygcat.top:5661/i/20230804/64cd1439f2df1.png" alt="Stream流-遍历/匹配" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(7, 6, 9, 3, 8, 2, 1);</span><br><span class="line"></span><br><span class="line">// 遍历输出符合条件的元素</span><br><span class="line">list.stream().filter(x -&gt; x &gt; 6).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">// 匹配第一个</span><br><span class="line">Optional&lt;Integer&gt; findFirst = list.stream().filter(x -&gt; x &gt; 6).findFirst();</span><br><span class="line"></span><br><span class="line">// 匹配任意（适用于并行流）</span><br><span class="line">Optional&lt;Integer&gt; findAny = list.parallelStream().filter(x -&gt; x &gt; 6).findAny();</span><br><span class="line"></span><br><span class="line">// 是否包含符合特定条件的元素</span><br><span class="line">boolean anyMatch = list.stream().anyMatch(x -&gt; x &lt; 6);</span><br><span class="line">System.out.println(&quot;匹配第一个值：&quot; + findFirst.get());</span><br><span class="line">System.out.println(&quot;匹配任意一个值：&quot; + findAny.get());</span><br><span class="line">System.out.println(&quot;是否存在大于6的值：&quot; + anyMatch);</span><br></pre></td></tr></table></figure><h3 id="match匹配"><a class="markdownIt-Anchor" href="#match匹配"></a> match匹配</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">list.add(&quot;周杰伦&quot;);</span><br><span class="line">list.add(&quot;王力宏&quot;);</span><br><span class="line">list.add(&quot;陶喆&quot;);</span><br><span class="line">list.add(&quot;林俊杰&quot;);</span><br><span class="line"></span><br><span class="line">boolean anyMatchFlag = list.stream().anyMatch(element -&gt; element.contains(&quot;王&quot;));</span><br><span class="line">boolean allMatchFlag = list.stream().allMatch(element -&gt; element.length() &gt; 1);</span><br><span class="line">boolean noneMatchFlag = list.stream().noneMatch(element -&gt; element.endsWith(&quot;沉&quot;));</span><br><span class="line">System.out.println(anyMatchFlag);</span><br><span class="line">System.out.println(allMatchFlag);</span><br><span class="line">System.out.println(noneMatchFlag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为“王力宏”以“王”字开头，所以 anyMatchFlag 应该为 true；因为“周杰伦”、“王力宏”、“陶喆”、“林俊杰”的字符串长度都大于 1，所以 allMatchFlag 为 true；因为 4 个字符串结尾都不是“沉”，所以 noneMatchFlag 为 true。</p><h2 id="2-筛选filter"><a class="markdownIt-Anchor" href="#2-筛选filter"></a> 2. 筛选(filter)</h2><p>筛选，是按照一定的规则校验流中的元素，将符合条件的元素提取到新的流中的操作。</p><blockquote><p>filter()：方法接收的是一个 Predicate（Java 8 新增的一个函数式接口，接受一个输入参数返回一个布尔值结果）类型的参数，因此，我们可以直接将一个 Lambda 表达式传递给该方法，比如说 element -&gt; element.contains(“王”) 就是筛选出带有“王”的字符串。<br />forEach()：方法接收的是一个 Consumer（Java 8 新增的一个函数式接口，接受一个输入参数并且无返回的操作）类型的参数，<code>类名 :: 方法名</code>是 Java 8 引入的新语法，System.out 返回 PrintStream 类，println 方法是打印的。</p></blockquote><p><img src="http://www.crygcat.top:5661/i/20230804/64cd143c63c24.jpeg" alt="Stream流-筛选" /></p><h3 id="筛选integer集合"><a class="markdownIt-Anchor" href="#筛选integer集合"></a> 筛选Integer集合</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream.filter(x -&gt; x &gt; 7).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h3 id="筛选对象集合"><a class="markdownIt-Anchor" href="#筛选对象集合"></a> 筛选对象集合</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//筛选员工中工资高于8000的人姓名，并形成新的集合</span><br><span class="line">List&lt;String&gt; fiterList = personList.stream().filter(x -&gt; x.getSalary() &gt; 8000)</span><br><span class="line">.map(Person::getName)</span><br><span class="line">.collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h2 id="3-聚合maxmincount"><a class="markdownIt-Anchor" href="#3-聚合maxmincount"></a> 3. 聚合(max/min/count)</h2><p><code>max</code>、<code>min</code>、<code>count</code>这些字眼你一定不陌生，没错，在<code>Mysql</code>中我们常用它们进行数据统计。<code>Java Stream</code>中也引入了这些概念和用法，极大地方便了我们对集合、数组的数据统计工作。<br /><img src="http://www.crygcat.top:5661/i/20230804/64cd143b52bad.png" alt="Stream流-聚合" /></p><h3 id="获取string集合中最长的元素"><a class="markdownIt-Anchor" href="#获取string集合中最长的元素"></a> 获取String集合中最长的元素</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; max = list.stream().max(Comparator.comparing(String::length));</span><br><span class="line">System.out.println(&quot;最长的字符串：&quot; + max.get());</span><br></pre></td></tr></table></figure><h3 id="获取integer集合中的最大值"><a class="markdownIt-Anchor" href="#获取integer集合中的最大值"></a> 获取Integer集合中的最大值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 自然排序</span><br><span class="line">Optional&lt;Integer&gt; max = list.stream().max(Integer::compareTo);</span><br><span class="line"></span><br><span class="line">// 自定义排序</span><br><span class="line">Optional&lt;Integer&gt; max2 = list.stream().max(new Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public int compare(Integer o1, Integer o2) &#123;</span><br><span class="line">return o1.compareTo(o2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;自然排序的最大值：&quot; + max.get());</span><br><span class="line">System.out.println(&quot;自定义排序的最大值：&quot; + max2.get());</span><br></pre></td></tr></table></figure><h3 id="获取员工工资最高的人"><a class="markdownIt-Anchor" href="#获取员工工资最高的人"></a> 获取员工工资最高的人</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Person&gt; max = personList.stream().max(Comparator.comparingInt(Person::getSalary));</span><br><span class="line">System.out.println(&quot;员工工资最大值：&quot; + max.get().getSalary());</span><br></pre></td></tr></table></figure><h3 id="计算integer集合中大于6的元素的个数"><a class="markdownIt-Anchor" href="#计算integer集合中大于6的元素的个数"></a> 计算Integer集合中大于6的元素的个数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// list中大于6的元素个数</span><br><span class="line">Integer count = list.stream().filter(x -&gt; x &gt; 6).count();</span><br></pre></td></tr></table></figure><h2 id="4-映射mapflatmap"><a class="markdownIt-Anchor" href="#4-映射mapflatmap"></a> 4. 映射(map/flatMap)</h2><p>映射，可以将一个流的元素按照一定的映射规则映射到另一个流中。<br />分为<code>map</code>和<code>flatMap</code>：</p><ul><li>map：接收的是一个 Function（Java 8 新增的一个函数式接口，接受一个输入参数 T，返回一个结果 R）类型的参数函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</li><li>flatMap：接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。<br /><img src="http://www.crygcat.top:5661/i/20230804/64cd143d7d9e6.jpeg" alt="Stream流-映射" /></li></ul><h3 id="英文字符串改为大写整数数组每个元素3map"><a class="markdownIt-Anchor" href="#英文字符串改为大写整数数组每个元素3map"></a> 英文字符串改为大写；整数数组每个元素+3（map）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 每个元素大写</span><br><span class="line">List&lt;String&gt; strList = Arrays.stream(strArr).map(String::toUpperCase).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">// 每个元素+3</span><br><span class="line">List&lt;Integer&gt; intListNew = intList.stream().map(x -&gt; x + 3).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h3 id="将员工的薪资全部增加1000map"><a class="markdownIt-Anchor" href="#将员工的薪资全部增加1000map"></a> 将员工的薪资全部增加1000（map）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> // 不改变原来员工集合的方式</span><br><span class="line">List&lt;Person&gt; personListNew = personList.stream().map(person -&gt; &#123;</span><br><span class="line">Person personNew = new Person(person.getName(), 0, 0, null, null);</span><br><span class="line">personNew.setSalary(person.getSalary() + 10000);</span><br><span class="line">return personNew;</span><br><span class="line">&#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">// 改变原来员工集合的方式</span><br><span class="line">List&lt;Person&gt; personListNew2 = personList.stream().map(person -&gt; &#123;</span><br><span class="line">person.setSalary(person.getSalary() + 10000);</span><br><span class="line">return person;</span><br><span class="line">&#125;).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h3 id="将两个字符数组合并成一个新的字符数组flatmap"><a class="markdownIt-Anchor" href="#将两个字符数组合并成一个新的字符数组flatmap"></a> 将两个字符数组合并成一个新的字符数组（flatMap）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; listNew = list.stream().flatMap(s -&gt; &#123;</span><br><span class="line">// 将每个元素转换成一个stream</span><br><span class="line">String[] split = s.split(&quot;,&quot;);</span><br><span class="line">Stream&lt;String&gt; s2 = Arrays.stream(split);</span><br><span class="line">return s2;</span><br><span class="line">&#125;).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h3 id="找出年龄为18的所有员工名称flatmap"><a class="markdownIt-Anchor" href="#找出年龄为18的所有员工名称flatmap"></a> 找出年龄为18的所有员工名称（flatMap）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//公司加入一个新人，找出公司所有员工中年龄为18的并打印出来</span><br><span class="line">Stream.of(list, newList).flatMap(persons -&gt; persons.stream().filter(person -&gt; person.getAge() == 18)).forEach(person -&gt; System.out.println(person.getName()));</span><br></pre></td></tr></table></figure><h2 id="5-归约reduce"><a class="markdownIt-Anchor" href="#5-归约reduce"></a> 5. 归约(reduce)</h2><p>归约，也称缩减，顾名思义，是把一个流缩减成一个值，能实现对集合求和、求乘积和求最值操作。</p><p>它有两种用法：</p><ul><li><code>Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator)</code><br />没有起始值，只有一个参数，就是运算规则，此时返回 Optional。</li><li><code>T reduce(T identity, BinaryOperator&lt;T&gt; accumulator)</code><br />有起始值（此基础上的累加），有运算规则，两个参数，此时返回的类型和起始值类型一致。</li></ul><p>运算规则可以是<code>Lambda表达式</code>（比如<code>(a, b) -&gt; a + b</code>），也可以是类名::方法名（比如<code>Integer::sum</code>）</p><p><img src="http://www.crygcat.top:5661/i/20230804/64cd143aa799b.png" alt="Stream流-归约" /></p><h3 id="求integer集合的元素之和-乘积和最大值"><a class="markdownIt-Anchor" href="#求integer集合的元素之和-乘积和最大值"></a> 求Integer集合的元素之和、乘积和最大值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 求和方式1</span><br><span class="line">Optional&lt;Integer&gt; sum = list.stream().reduce((x, y) -&gt; x + y);</span><br><span class="line"></span><br><span class="line">// 求和方式2</span><br><span class="line">Optional&lt;Integer&gt; sum2 = list.stream().reduce(Integer::sum);</span><br><span class="line"></span><br><span class="line">// 求和方式3</span><br><span class="line">Integer sum3 = list.stream().reduce(0, Integer::sum);</span><br><span class="line"></span><br><span class="line">// 求乘积</span><br><span class="line">Optional&lt;Integer&gt; product = list.stream().reduce((x, y) -&gt; x * y);</span><br><span class="line"></span><br><span class="line">// 求最大值方式1</span><br><span class="line">Optional&lt;Integer&gt; max = list.stream().reduce((x, y) -&gt; x &gt; y ? x : y);</span><br><span class="line"></span><br><span class="line">// 求最大值写法2</span><br><span class="line">Integer max2 = list.stream().reduce(1, Integer::max);</span><br></pre></td></tr></table></figure><h3 id="求所有员工的工资之和和最高工资"><a class="markdownIt-Anchor" href="#求所有员工的工资之和和最高工资"></a> 求所有员工的工资之和和最高工资</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 求工资之和方式1：</span><br><span class="line">Optional&lt;Integer&gt; sumSalary = personList.stream().map(Person::getSalary).reduce(Integer::sum);</span><br><span class="line"></span><br><span class="line">// 求工资之和方式2：</span><br><span class="line">Integer sumSalary2 = personList.stream().reduce(0, (sum, p) -&gt; sum += p.getSalary(), (sum1, sum2) -&gt; sum1 + sum2);</span><br><span class="line"></span><br><span class="line">// 求工资之和方式3：</span><br><span class="line">Integer sumSalary3 = personList.stream().reduce(0, (sum, p) -&gt; sum += p.getSalary(), Integer::sum);</span><br><span class="line"></span><br><span class="line">// 求最高工资方式1：</span><br><span class="line">Integer maxSalary = personList.stream().reduce(0, (max, p) -&gt; max &gt; p.getSalary() ? max : p.getSalary(), Integer::max);</span><br><span class="line"></span><br><span class="line">// 求最高工资方式2：</span><br><span class="line">Integer maxSalary2 = personList.stream().reduce(0, (max, p) -&gt; max &gt; p.getSalary() ? max : p.getSalary(), (max1, max2) -&gt; max1 &gt; max2 ? max1 : max2);</span><br></pre></td></tr></table></figure><h2 id="6-收集collect"><a class="markdownIt-Anchor" href="#6-收集collect"></a> 6. 收集(collect)</h2><p><code>collect</code>，收集，可以说是内容最繁多、功能最丰富的部分了。从字面上去理解，就是把一个流收集起来，最终可以是收集成一个值也可以收集成一个新的集合。</p><blockquote><p><code>collect</code>主要依赖<code>java.util.stream.Collectors</code>类内置的静态方法。</p></blockquote><h3 id="归集tolisttosettomap"><a class="markdownIt-Anchor" href="#归集tolisttosettomap"></a> 归集(toList/toSet/toMap)</h3><p>因为流不存储数据，那么在流中的数据完成处理后，需要将流中的数据重新归集到新的集合里。<code>toList</code>、<code>toSet</code>和<code>toMap</code>比较常用，另外还有<code>toCollection</code>、<code>toConcurrentMap</code>等复杂一些的用法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// toList</span><br><span class="line">List&lt;Integer&gt; listNew = list.stream().filter(x -&gt; x % 2 == 0).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">// toSet</span><br><span class="line">Set&lt;Integer&gt; set = list.stream().filter(x -&gt; x % 2 == 0).collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line">// toMap</span><br><span class="line">Map&lt;?, Person&gt; map = personList.stream().filter(p -&gt; p.getSalary() &gt; 8000).collect(Collectors.toMap(Person::getName, p -&gt; p));</span><br></pre></td></tr></table></figure><h3 id="统计countaveraging"><a class="markdownIt-Anchor" href="#统计countaveraging"></a> 统计(count/averaging)</h3><p><code>Collectors</code>提供了一系列用于数据统计的静态方法：</p><ul><li>计数：count</li><li>平均值：averagingInt、averagingLong、averagingDouble</li><li>最值：maxBy、minBy</li><li>求和：summingInt、summingLong、summingDouble</li><li>统计以上所有：summarizingInt、summarizingLong、summarizingDouble</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 求总数</span><br><span class="line">Long count = personList.stream().collect(Collectors.counting());</span><br><span class="line"></span><br><span class="line">// 求平均工资</span><br><span class="line">Double average = personList.stream().collect(Collectors.averagingDouble(Person::getSalary));</span><br><span class="line"></span><br><span class="line">// 求最高工资</span><br><span class="line">Optional&lt;Integer&gt; max = personList.stream().map(Person::getSalary).collect(Collectors.maxBy(Integer::compare));</span><br><span class="line"></span><br><span class="line">// 求工资之和</span><br><span class="line">Integer sum = personList.stream().collect(Collectors.summingInt(Person::getSalary));</span><br><span class="line"></span><br><span class="line">// 一次性统计所有信息</span><br><span class="line">DoubleSummaryStatistics collect = personList.stream().collect(Collectors.summarizingDouble(Person::getSalary));</span><br></pre></td></tr></table></figure><h3 id="分组partitioningbygroupingby"><a class="markdownIt-Anchor" href="#分组partitioningbygroupingby"></a> 分组(partitioningBy/groupingBy)</h3><p>分区：将<code>Stream</code>按条件分为两个<code>Map</code>，比如员工按薪资是否高于8000分为两部分。<br />分组：将集合分为多个<code>Map</code>，比如员工按性别分组。有单级分组和多级分组。<br /><img src="http://www.crygcat.top:5661/i/20230804/64cd143bd6757.png" alt="Stream流-收集-分组" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 将员工按薪资是否高于8000分组</span><br><span class="line">Map&lt;Boolean, List&lt;Person&gt;&gt; part = personList.stream().collect(Collectors.partitioningBy(x -&gt; x.getSalary() &gt; 8000));</span><br><span class="line"></span><br><span class="line">// 将员工按性别分组</span><br><span class="line">Map&lt;String, List&lt;Person&gt;&gt; group = personList.stream().collect(Collectors.groupingBy(Person::getSex));</span><br><span class="line"></span><br><span class="line">// 将员工先按性别分组，再按地区分组</span><br><span class="line">Map&lt;String, Map&lt;String, List&lt;Person&gt;&gt;&gt; group2 = personList.stream().collect(Collectors.groupingBy(Person::getSex, Collectors.groupingBy(Person::getArea)));</span><br><span class="line"></span><br><span class="line">// 按照年龄分组（无重复）</span><br><span class="line">Map&lt;Integer, Set&lt;Person&gt;&gt; map1 = list.stream().collect(Collectors.groupingBy(Person::getAge, Collectors.toSet()));</span><br><span class="line"></span><br><span class="line">// 按照年龄分组（无重复 + 保持插入顺序）</span><br><span class="line">Map&lt;Integer, Set&lt;Person&gt;&gt; map2 = list.stream().collect(Collectors.groupingBy(Person::getAge, LinkedHashMap::new, Collectors.toSet()));</span><br></pre></td></tr></table></figure><h3 id="接合joining"><a class="markdownIt-Anchor" href="#接合joining"></a> 接合(joining)</h3><p><code>joining</code>可以将<code>Stream</code>中的元素用特定的连接符（没有的话，则直接连接）连接成一个字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 所有员工的姓名</span><br><span class="line">String names = personList.stream().map(p -&gt; p.getName()).collect(Collectors.joining(&quot;,&quot;));</span><br><span class="line"></span><br><span class="line">// 拼接后的字符串</span><br><span class="line">String string = list.stream().collect(Collectors.joining(&quot;-&quot;));</span><br></pre></td></tr></table></figure><h3 id="归约reducing"><a class="markdownIt-Anchor" href="#归约reducing"></a> 归约(reducing)</h3><p><code>Collectors</code>类提供的<code>reducing</code>方法，相比于<code>Stream</code>本身的<code>reduce</code>方法，增加了对自定义归约的支持</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 每个员工减去起征点后的薪资之和（这个例子并不严谨，但一时没想到好的例子）</span><br><span class="line">Integer sum = personList.stream().collect(Collectors.reducing(0, Person::getSalary, (i, j) -&gt; (i + j - 5000)));</span><br><span class="line">System.out.println(&quot;员工扣税薪资总和：&quot; + sum);</span><br><span class="line"></span><br><span class="line">// stream的reduce，员工薪资总和</span><br><span class="line">Optional&lt;Integer&gt; sum2 = personList.stream().map(Person::getSalary).reduce(Integer::sum);</span><br></pre></td></tr></table></figure><h2 id="7-排序sorted"><a class="markdownIt-Anchor" href="#7-排序sorted"></a> 7. 排序(sorted)</h2><p>sorted，中间操作。有两种排序：</p><ul><li>sorted()：自然排序，流中元素需实现Comparable接口</li><li>sorted(Comparator com)：Comparator排序器自定义排序</li></ul><h3 id="将员工按工资由高到低工资一样则按年龄由大到小排序"><a class="markdownIt-Anchor" href="#将员工按工资由高到低工资一样则按年龄由大到小排序"></a> 将员工按工资由高到低（工资一样则按年龄由大到小）排序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 按工资升序排序（自然排序）</span><br><span class="line">List&lt;String&gt; newList = personList.stream().sorted(Comparator.comparing(Person::getSalary)).map(Person::getName)</span><br><span class="line">.collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">// 按工资倒序排序</span><br><span class="line">List&lt;String&gt; newList2 = personList.stream().sorted(Comparator.comparing(Person::getSalary).reversed())</span><br><span class="line">.map(Person::getName).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">// 先按工资再按年龄升序排序</span><br><span class="line">List&lt;String&gt; newList3 = personList.stream()</span><br><span class="line">.sorted(Comparator.comparing(Person::getSalary).thenComparing(Person::getAge)).map(Person::getName)</span><br><span class="line">.collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">// 先按工资再按年龄自定义排序（降序）</span><br><span class="line">List&lt;String&gt; newList4 = personList.stream().sorted((p1, p2) -&gt; &#123;</span><br><span class="line">if (p1.getSalary() == p2.getSalary()) &#123;</span><br><span class="line">return p2.getAge() - p1.getAge();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return p2.getSalary() - p1.getSalary();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).map(Person::getName).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h2 id="8-提取组合"><a class="markdownIt-Anchor" href="#8-提取组合"></a> 8. 提取/组合</h2><p>流也可以进行合并、去重、限制、跳过等操作。<br />其中，<code>skip</code>和<code>limit</code>相似，都是从<code>1</code>开始，传入负值会抛出异常。<br /><img src="http://www.crygcat.top:5661/i/20230804/64cd143ce5de0.jpeg" alt="Stream流-提取/组合" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// concat:合并两个流 distinct：去重</span><br><span class="line">List&lt;String&gt; newList = Stream.concat(stream1, stream2).distinct().collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">// limit：限制从流中获得前n个数据</span><br><span class="line">List&lt;Integer&gt; collect = Stream.iterate(1, x -&gt; x + 2).limit(10).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">// skip：跳过前n个数据</span><br><span class="line">List&lt;Integer&gt; collect2 = Stream.iterate(1, x -&gt; x + 2).skip(1).limit(5).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><hr /><h1 id="四-语句"><a class="markdownIt-Anchor" href="#四-语句"></a> 四、语句</h1><h2 id="1-提取"><a class="markdownIt-Anchor" href="#1-提取"></a> 1. 提取</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//提取list集合中的对象某个字段然后生成对应的新集合</span><br><span class="line">List&lt;Integer&gt; modelItemIds = casePo.getAssessment().getAssessmentItems().stream().map(AssessmentItemPo::getModelItemId).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h2 id="2-求和"><a class="markdownIt-Anchor" href="#2-求和"></a> 2. 求和</h2><h3 id="字段累加求和"><a class="markdownIt-Anchor" href="#字段累加求和"></a> 字段累加求和</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字段累加求和</span><br><span class="line">int total = list.stream().mapToInt(CaseInfoVO::getPersonValue).sum();</span><br></pre></td></tr></table></figure><h3 id="bigdecimal-求和"><a class="markdownIt-Anchor" href="#bigdecimal-求和"></a> Bigdecimal 求和</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//对YsHouseInfo.contractAmt求和</span><br><span class="line">BigDecimal agreConAmt = houseInfos.stream()</span><br><span class="line">.map(YsHouseInfo::getContractAmt)</span><br><span class="line">.reduce(BigDecimal.ZERO, BigDecimal::add);</span><br></pre></td></tr></table></figure><hr /><h1 id="五-常见错误"><a class="markdownIt-Anchor" href="#五-常见错误"></a> 五、常见错误</h1><h2 id="1-stream操作tomap时duplicate-key"><a class="markdownIt-Anchor" href="#1-stream操作tomap时duplicate-key"></a> 1. stream()操作toMap()时Duplicate key</h2><h3 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述：</h3><p><code>Java8</code>中<code>Steam()</code>流进行<code>tomap</code>转换编程时，遇到以下错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: Duplicate key bbb</span><br><span class="line">at java.util.stream.Collectors.lambda$throwingMerger$0(Collectors.java:133)</span><br><span class="line">at java.util.HashMap.merge(HashMap.java:1253)</span><br><span class="line">at java.util.stream.Collectors.lambda$toMap$58(Collectors.java:1320)</span><br><span class="line">at java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169)</span><br><span class="line">at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1374)</span><br><span class="line">at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)</span><br><span class="line">at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)</span><br><span class="line">at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)</span><br><span class="line">at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)</span><br><span class="line">at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a class="markdownIt-Anchor" href="#解决方案"></a> 解决方案</h3><p>解决方式就在<code>Java8</code>提供的<code>Collectors.toMap()</code>方法中，其第三个参数就是当出现<code>duplicate key</code>的时候的处理方案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">方案一： 出现重复时，取前面value的值，或者取后面放入的value值，则覆盖先前的value值</span><br><span class="line"></span><br><span class="line">// 取后面的值，舍弃前面的值</span><br><span class="line">Map&lt;Long, String&gt; map = userList.stream()</span><br><span class="line">            .collect(Collectors.toMap(User::getId, User::getUsername, (v1, v2) -&gt; v2));</span><br><span class="line"></span><br><span class="line">// 取前面的值，舍弃后面的值</span><br><span class="line">Map&lt;Long, String&gt; map = userList.stream()</span><br><span class="line">            .collect(Collectors.toMap(User::getId, User::getUsername, (v1, v2) -&gt; v1));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方案二： Map的value可以储存一个list，把重复key的值放入list，再存到value中</span><br><span class="line">userList.stream().collect(Collectors.toMap(User::getId,</span><br><span class="line">                e -&gt; Arrays.asList(e.getUsername()),</span><br><span class="line">                (List&lt;String&gt; oldList, List&lt;String&gt; newList) -&gt; &#123;</span><br><span class="line">                    oldList.addAll(newList);</span><br><span class="line">                    return oldList;</span><br><span class="line">                &#125;));</span><br></pre></td></tr></table></figure><hr /><blockquote><p>相关引用：</p><ol><li><a href="https://blog.csdn.net/ss810540895/article/details/126172285">CSDN - Stream流详解</a></li><li><a href="https://blog.csdn.net/qing_gee/article/details/105238960">CSDN - 一文带你入门Java Stream流，太强了</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Mysql】学习记录·日期</title>
      <link href="/posts/1b38c7aa.html"/>
      <url>/posts/1b38c7aa.html</url>
      
        <content type="html"><![CDATA[<h2 id="日期说明"><a class="markdownIt-Anchor" href="#日期说明"></a> 日期说明</h2><p>日期和时间函数主要用来处理日期和时间值，一般的日期函数除了使用DATE类型的参数外，也可以使用DATESTAMP类型或者TIMESTAMP类型的参数，但是会忽略这些值的时间部分。相同的，以TIME类型值为参数的函数，可以接受TIMESTAMP类型的参数，但是会忽略日期部分。许多日期函数可以同时接收数和字符串这两种参数。<br /><br></p><h2 id="获取当前日期的函数和获取当前时间的函数"><a class="markdownIt-Anchor" href="#获取当前日期的函数和获取当前时间的函数"></a> 获取当前日期的函数和获取当前时间的函数</h2><p><code>CURDATE()</code>函数和<code>CURRENT_DATE()</code>函数的作用相同，将当前日期按照按照<code>YYYY-MM-DD</code>或<code>YYYYMMDD</code>格式返回。<br /><code>CURTIME()</code>函数和<code>CURRENT_TIME()</code>函数的作用相同，将当前时间以<code>HH:MM:SS</code>或<code>HHMMSS</code>格式返回。<br /><code>CURDATE()+0</code> 将当前日期值转换为数值型。<br /><strong>案例：</strong> 使用日期函数获取系统当前日期；使用时间函数获取当前时间。<br /><strong>命令语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select CURDATE(), CURRENT_DATE(), CURDATE()+0;</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong><br /><img src="http://www.crygcat.top:5661/CWqkrO.png" alt="mysql日期01" /><br /><strong>命令语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select CURTIME(),CURRENT_TIME(),CURTIME()+0;</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong><br /><img src="http://www.crygcat.top:5661/RcEqmp.png" alt="mysql日期02" /><br /><br></p><h2 id="获取当前日期和时间的函数"><a class="markdownIt-Anchor" href="#获取当前日期和时间的函数"></a> 获取当前日期和时间的函数</h2><p><code>CURRENT_TIMESTAMP()</code>、<code>LOCALTIME()</code>、<code>NOW()</code>和<code>SYSDATE()</code>四个函数的作用相同。均返回当前日期和时间值，格式为<code>YYYY-MM-DD HH:MM:SS</code>或<code>YYYYMMDDHHMMSS</code>。<br /><strong>案例：</strong> 使用日期函数获取当前系统日期和时间。<br /><strong>命令语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select CURRENT_TIMESTAMP(), LOCALTIME(), NOW(), SYSDATE();</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong><br /><img src="http://www.crygcat.top:5661/xAp18l.png" alt="mysql日期03" /><br /><br></p><h2 id="unix时间戳函数"><a class="markdownIt-Anchor" href="#unix时间戳函数"></a> UNIX时间戳函数</h2><p><code>UNIX_TIMESTAMP()</code>函数以UNIX时间戳函数的形式返回当前时间；<code>UNIX_TIMESTAMP(d)</code>函数将时间d以UNIX时间戳的形式返回。<br /><code>FROM_UNIXTIME(date)</code>函数把UNIX时间戳函数转换为普通格式的时间，与<code>UNIX_TIMESTAMP(date)</code>函数互为反函数。<br /><strong>案例：</strong> 使用<code>UNIX_TIMESTAMP()</code>函数返回UNIX格式的时间戳；使用<code>FROM_UNIXTIME()</code>函数将UNIX时间戳函数转换为普通格式时间。<br /><strong>命令语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select UNIX_TIMESTAMP(), UNIX_TIMESTAMP(NOW()), NOW(), FROM_UNIXTIME(1534058518);</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong><br /><img src="http://www.crygcat.top:5661/WQpYvr.png" alt="mysql日期04" /><br /><br></p><h2 id="返回utc日期的函数和返回utc时间的函数"><a class="markdownIt-Anchor" href="#返回utc日期的函数和返回utc时间的函数"></a> 返回UTC日期的函数和返回UTC时间的函数</h2><p><code>UTC_DATE()</code>函数返回当前UTC（世界标准时间）日期值，其格式为<code>YYYY-MM-DD</code>或<code>YYYYMMDD</code>，具体格式取决于函数是用在字符串还是数字语境中。<br /><code>UTC_TIME()</code>返回当前的UTC时间值，其格式为<code>HH:MM:SS</code>或<code>HHMMSS</code>，具体格式取决函数是在字符串还是数字语境中。<br /><strong>案例：</strong> 使用<code>UTC_DATE()</code>函数返回当前UTC日期值；使用<code>UTC_TIME</code>返回当前的UTC时间值。<br /><strong>命令语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select UTC_DATE(), UTC_DATE()+0;</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong><br /><img src="http://www.crygcat.top:5661/viT9Uh.png" alt="mysql日期05" /><br /><strong>命令语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select UTC_TIME(), UTC_TIME()+0;</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong><br /><img src="http://www.crygcat.top:5661/lvp89D.png" alt="mysql日期06" /><br /><br></p><h2 id="获取月份函数monthdate和monthnamedate"><a class="markdownIt-Anchor" href="#获取月份函数monthdate和monthnamedate"></a> 获取月份函数MONTH(date)和MONTHNAME(date)</h2><p><code>MONTH(date)</code>函数返回date对应月份，范围<code>1—12</code>。<br /><code>MONTHNAME(date)</code>函数返回date对应月份的英文全名。<br /><strong>案例：</strong> 使用<code>MONTH()</code>函数指定日期中月份；使用<code>MONTHNAME()</code>函数返回指定日期中的月份名称。<br /><strong>命令语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select MONTH(&#x27;2020-02-01&#x27;), MONTH(&#x27;2023-02-01&#x27;);</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong><br /><img src="http://www.crygcat.top:5661/TDMOjg.png" alt="mysql日期07" /><br /><strong>命令语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select MONTHNAME(&#x27;2023-02-01&#x27;), MONTHNAME(&#x27;2023-02-01&#x27;);</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong><br /><img src="http://www.crygcat.top:5661/X935jL.png" alt="mysql日期08" /><br /><br></p><h2 id="获取星期的函数daynamed-dayofweekd和weekdayd"><a class="markdownIt-Anchor" href="#获取星期的函数daynamed-dayofweekd和weekdayd"></a> 获取星期的函数DAYNAME(d)、DAYOFWEEK(d)和WEEKDAY(d)</h2><p><code>DAYNAME(d)</code>函数返回d对应法人工作日的英文名称，如Sunday、Monday等。<br /><code>DAYOFWEEK(d)</code>函数是返回d对应的一周中的索引（位置）。1表示周日，2表示周一…7表示周六。<br /><strong>案例：</strong> 使用<code>DAYNAME()</code>函数返回指定日期的星期数；使用<code>DAYOFWEEK()</code>函数返回当前日期对应的周索引<br /><strong>命令语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select DAYNAME(&#x27;2023-02-01&#x27;), DAYOFWEEK(&#x27;2023-02-01&#x27;), DAYOFWEEK(&#x27;2023-02-01&#x27;);</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong><br /><img src="http://www.crygcat.top:5661/9x7O5c.png" alt="mysql日期09" /><br />由于2023年02月01日为周三，因此<code>WEEKDAY()</code>返回的结果是Wednesday 而<code>DAYOFWEEK()</code>返回的索引值是1。可以看到，<code>WEEKDAY()</code>函数和<code>DAYOFWEEK()</code>函数都是返回指定日期在某一周内的位置，只是索引编号不同。<br /><br></p><h2 id="获取星期数的函数weekd和weekofyeard"><a class="markdownIt-Anchor" href="#获取星期数的函数weekd和weekofyeard"></a> 获取星期数的函数WEEK(d)和WEEKOFYEAR(d)</h2><p><code>WEEK(d)</code>函数用于计算日期d是一年中的第几周。<code>WEEK()</code>的双参数形式允许指定该星期是否起始于周日或周一，以及返回值是否为<code>0-53</code>或<code>1-53</code>.若Mode参数被省略，怎使用<code>default_week_format</code>系统自变量的值，可参考下表：</p><table><thead><tr><th style="text-align:left">Mode</th><th style="text-align:left">一周的第一天</th><th style="text-align:left">范围</th><th style="text-align:left">第一周计算方式</th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:left">周日</td><td style="text-align:left">0~53</td><td style="text-align:left">遇到本年的第一个星期天开始，是第一周</td></tr><tr><td style="text-align:left">1</td><td style="text-align:left">周一</td><td style="text-align:left">0~53</td><td style="text-align:left">若第一周能超过三天，则计算为本年的第一周</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">周日</td><td style="text-align:left">1~53</td><td style="text-align:left">遇到本年的第一个星期天开始，是第一周</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">周一</td><td style="text-align:left">1~53</td><td style="text-align:left">若第一周能超过三天，则计算为本年的第一周</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">周日</td><td style="text-align:left">0~53</td><td style="text-align:left">若第一周能超过三天，则计算为本年的第一周</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">周一</td><td style="text-align:left">0~53</td><td style="text-align:left">遇到本年的第一个星期天开始，是第一周</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">周日</td><td style="text-align:left">1~53</td><td style="text-align:left">若第一周能超过三天，则计算为本年的第一周</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left">周一</td><td style="text-align:left">1~53</td><td style="text-align:left">遇到本年的第一个星期天开始，是第一周</td></tr></tbody></table><p><code>WEEKOFYEAR(d)</code>计算某天位与一年中的第几周，范围是<code>1-53</code>，相当于<code>WEEK(d,3)</code><br /><strong>案例：</strong> 使用<code>WEEK()</code>和<code>WEEKOFYEAR()</code>函数查询指定日期是一年中的第几周<br /><strong>命令语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select WEEK(&#x27;2023-02-01&#x27;), WEEK(&#x27;2023-02-01&#x27;,0), WEEK(&#x27;2023-02-01&#x27;,1), WEEK(&#x27;2023-02-01&#x27;,3), WEEKOFYEAR(&#x27;2023-02-01&#x27;);</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong><br /><img src="http://www.crygcat.top:5661/fFGanO.png" alt="mysql日期10" /><br />可以看到，<code>WEEK('2023-02-01')</code>使用了一个参数，第二个参数为默认值<code>default_week_format</code>，MySQL中该值默认为0，指定一周的第一天为周日，因此和<code>WEEK('2023-02-01',0)</code>的返回结果相同；另外<code>WEEK('2023-02-01',1)</code>和<code>WEEK('2023-02-01',3)</code>结果相同，说明2023年1月1日是个周日或周一，一周没有过3天，所以这几个参数结果都说明这周是第5周。<br /><br></p><h2 id="获取天数的函数dayofyeard和dayofmonthd"><a class="markdownIt-Anchor" href="#获取天数的函数dayofyeard和dayofmonthd"></a> 获取天数的函数DAYOFYEAR(d)和DAYOFMONTH(d)</h2><p><code>DAYOFYEAR(d)</code>函数返回d是一年中的第几天，范围是<code>1-366</code>。<br /><code>DAYOFMONTH(d)</code>函数返回d是一个月中的第几天，范围是<code>1-31</code>。<br /><strong>案例：</strong> 使用<code>DAYOFYEAR()</code>函数返回指定日期在一年中的位置；使用<code>DAYOFMONTH()</code>函数返回指定日期在一个月中的位置<br /><strong>命令语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select DAYOFYEAR(&#x27;2023-02-01&#x27;), DAYOFMONTH(&#x27;2023-02-01&#x27;);</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong><br /><img src="http://www.crygcat.top:5661/ydftE0.png" alt="mysql日期11" /><br /><br></p><h2 id="获取年份-季度-小时-分钟和秒钟的函数"><a class="markdownIt-Anchor" href="#获取年份-季度-小时-分钟和秒钟的函数"></a> 获取年份、季度、小时、分钟和秒钟的函数</h2><p><code>YEAR(date)</code>函数返回date对应的年份，范围是<code>1970-2069</code>。<br /><code>QUARTER(date)</code>函数返回date对应的一年中的季度值，范围<code>1-4</code>。<br /><code>HOUR(time)</code>函数返回time对应的时钟数，范围是<code>0-23</code>。<br /><code>MINUTE(time)</code>函数返回time对应的分钟数，范围是<code>0-59</code>。<br /><code>SECOND(time)</code>函数返回time对应的秒钟数，范围是<code>0-59</code>。<br /><strong>案例：</strong> 使用<code>YEAR()</code>函数返回指定日期对应的年份；使用<code>QUARTER()</code>函数返回指定日期对应的季度，使用<code>HOUR()</code>函数返回指定时间对应的时钟值，使用<code>MINUTE()</code>函数返回指定时间对应的分钟值，使用<code>SECOND()</code>函数返回指定时间对应的秒钟值<br /><strong>命令语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select YEAR(&#x27;2023-02-01&#x27;), QUARTER(&#x27;2023-02-01&#x27;);</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong><br /><img src="http://www.crygcat.top:5661/mBT0kK.png" alt="mysql日期12" /><br /><strong>命令语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select HOUR(&#x27;2023-02-01 16:50:30&#x27;), MINUTE(&#x27;2023-02-01 16:50:30&#x27;), SECOND(&#x27;2023-02-01 16:50:30&#x27;);</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong><br /><img src="http://www.crygcat.top:5661/e8aOJj.png" alt="mysql日期13" /><br /><br></p><h2 id="获取日期指定值的函数extracttype-from-date"><a class="markdownIt-Anchor" href="#获取日期指定值的函数extracttype-from-date"></a> 获取日期指定值的函数EXTRACT(type FROM date)</h2><p><code>EXTRACT(type FROM date)</code>函数所使用的时间间隔类型说明符同<code>DATE_ADD()</code>或<code>DATE_SUB()</code>的相同，但它是从日期中提取一部分，而不是执行日期运算。<br /><strong>案例：</strong> 使用<code>EXTRACT()</code>函数提取日期值或时间值<br /><strong>命令语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select EXTRACT(YEAR FROM &#x27;2023-02-01&#x27;) as col1, EXTRACT(YEAR_MONTH FROM &#x27;2023-02-01&#x27;) as col2, EXTRACT(DAY_MINUTE FROM &#x27;2023-02-01 17:01:10&#x27;) as col3;</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong><br /><img src="http://www.crygcat.top:5661/X0nKmF.png" alt="mysql日期14" /><br />Type值为<code>YEAR</code>时只返回年值，结果为2023；type值为<code>YEAR_MONTH</code>时返回年月值，结果为202302；type值为<code>DAY_MINUTE</code>时返回日、小时和分钟值，结果为11701。<br /><br></p><h2 id="时间和秒钟转换函数"><a class="markdownIt-Anchor" href="#时间和秒钟转换函数"></a> 时间和秒钟转换函数</h2><p><code>TIME_TO_SEC(time)</code>函数返回已转换为秒的time参数。转换公式为<code>小时*3600+分钟*60+秒</code>。<br /><code>SEC_TO_TIME(seconds)</code>函数返回时间，格式为<code>HH:MM:SS</code>或<code>HHMMSS</code>。<br /><strong>案例：</strong> 使用<code>TIME_TO_SEC()</code>函数将时间转换为秒值；使用<code>SEC_TO_TIME()</code>函数将秒数转换为时间格式<br /><strong>命令语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select TIME_TO_SEC(&#x27;2023-02-01 17:21:50&#x27;);</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong><br /><img src="http://www.crygcat.top:5661/PRB8EX.png" alt="mysql日期15" /><br /><strong>命令语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select SEC_TO_TIME(&#x27;62510&#x27;);</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong><br /><img src="http://www.crygcat.top:5661/COfnag.png" alt="mysql日期16" /><br /><br></p><h2 id="计算日期和时间的函数"><a class="markdownIt-Anchor" href="#计算日期和时间的函数"></a> 计算日期和时间的函数</h2><p>计算日期时间的函数有<code>DATE_ADD()</code>、<code>ADDDATE()</code>、<code>DATE_SUB()</code>、<code>SUBDATE()</code>、<code>ADDTIME()</code>、<code>SUBTIME()</code>和<code>DATE_DIFF()</code>。</p><h3 id="date_adddateiinterval-expr-type和date_subdateiinterval-expr-type"><a class="markdownIt-Anchor" href="#date_adddateiinterval-expr-type和date_subdateiinterval-expr-type"></a> DATE_ADD(date,IINTERVAL expr type)和DATE_SUB(date,IINTERVAL expr type)</h3><p>在<code>DATE_ADD(date,IINTERVAL expr type)</code>和<code>DATE_SUB(date,IINTERVAL expr type)</code>中，<code>date</code>是一个DATETIME或DATE值，用来指定起始时间；<code>expr</code>是一个表达式，用来指定从起始日期，开始添加或减去的时间间隔值，<code>expr</code>也是一个字符串，对于赋值的时间间隔，可以以一个负号开头；<code>type</code>为关键词，它表明了表达式被解释的方式。下表列出了<code>type</code>和<code>expr</code>参数的关系。</p><table><thead><tr><th style="text-align:left">Type 值</th><th style="text-align:left">预期的 expr格式</th></tr></thead><tbody><tr><td style="text-align:left">Microseconde</td><td style="text-align:left">microseconds</td></tr><tr><td style="text-align:left">second</td><td style="text-align:left">seconds</td></tr><tr><td style="text-align:left">minute</td><td style="text-align:left">minutes</td></tr><tr><td style="text-align:left">houre</td><td style="text-align:left">hours</td></tr><tr><td style="text-align:left">day</td><td style="text-align:left">days</td></tr><tr><td style="text-align:left">week</td><td style="text-align:left">weeks</td></tr><tr><td style="text-align:left">month</td><td style="text-align:left">months</td></tr><tr><td style="text-align:left">quarter</td><td style="text-align:left">quarters</td></tr><tr><td style="text-align:left">year</td><td style="text-align:left">years</td></tr><tr><td style="text-align:left">second_microsecond</td><td style="text-align:left">seconds.microseconds</td></tr><tr><td style="text-align:left">minute_microsecond</td><td style="text-align:left">minutes.microseconds</td></tr><tr><td style="text-align:left">minute_second</td><td style="text-align:left">minutes.seconds</td></tr><tr><td style="text-align:left">hour_microsecond</td><td style="text-align:left">hours.microseconds</td></tr><tr><td style="text-align:left">hour_second</td><td style="text-align:left">hours:minutes:seconds</td></tr><tr><td style="text-align:left">hour_minute</td><td style="text-align:left">hours:minutes</td></tr><tr><td style="text-align:left">day_microsecond</td><td style="text-align:left">days.microseconds</td></tr><tr><td style="text-align:left">day_second</td><td style="text-align:left">days hours:minutes:seconds</td></tr><tr><td style="text-align:left">day_minute</td><td style="text-align:left">davs hours:minutes</td></tr><tr><td style="text-align:left">day_hour</td><td style="text-align:left">days hours</td></tr><tr><td style="text-align:left">year_month</td><td style="text-align:left">years-months</td></tr></tbody></table><p>若date参数是一个date值，计算时只会包括<code>YEAR</code>、<code>MONTH</code>和<code>DAY</code>部分(即没有时间部分)，其结果是一个DATE值。否则，结果将是一个DATETIME值。</p><h3 id="日期加date_adddateinterval-expr-type和adddatedateinterval-expr-type"><a class="markdownIt-Anchor" href="#日期加date_adddateinterval-expr-type和adddatedateinterval-expr-type"></a> 日期加：DATE_ADD(date,INTERVAL expr type)和ADDDATE(date,INTERVAL expr type)</h3><p><code>DATE_ADD(date,INTERVAL expr type)</code>和<code>ADDDATE(date,INTERVAL expr type)</code>两个函数的作用相同，都是执行日期的加运算。<br /><strong>案例：</strong> 使用<code>DATE_ADD()</code>和<code>ADDDATE()</code>函数执行日期<code>加</code>操作<br /><strong>命令语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select DATE_ADD(&#x27;2023-02-01 23:59:59&#x27;, INTERVAL 2 SECOND) AS col1, ADDDATE(&#x27;2023-02-01 23:59:59&#x27;, INTERVAL 2 SECOND) AS col2, DATE_ADD(&#x27;2023-02-01 23:59:59&#x27;, INTERVAL &#x27;1:1&#x27; MINUTE_SECOND) AS col3;</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong><br /><img src="http://www.crygcat.top:5661/eK04uk.png" alt="mysql日期17" /></p><h3 id="日期减date_subdateinterval-expr-type和subdatedateinterval-expr-type"><a class="markdownIt-Anchor" href="#日期减date_subdateinterval-expr-type和subdatedateinterval-expr-type"></a> 日期减：DATE_SUB(date,INTERVAL expr type)和SUBDATE(date,INTERVAL expr type)</h3><p><strong>案例：</strong> 使用<code>DATE_SUB()</code>和<code>SUBDATE()</code>函数执行日期<code>减</code>操作<br /><strong>命令语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select DATE_SUB(&#x27;2023-01-01 00:00:01&#x27;, INTERVAL 2 SECOND) AS col1, SUBDATE(&#x27;2023-01-01 00:00:01&#x27;, INTERVAL 2 SECOND) AS col2, DATE_SUB(&#x27;2023-01-01 00:00:01&#x27;, INTERVAL &#x27;0 0:1:1&#x27; DAY_SECOND) AS col3;</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong><br /><img src="http://www.crygcat.top:5661/SJxAbw.png" alt="mysql日期18" /></p><h3 id="日期加addtimedate-expr函数"><a class="markdownIt-Anchor" href="#日期加addtimedate-expr函数"></a> 日期加：ADDTIME(date expr)函数</h3><p><code>ADDTIME(date expr)</code>函数将expr值添加到date，并返回修改后的值，date是一个日期或者日期表达式，而expr是一个时间表达式。<br /><strong>案例：</strong> 使用<code>ADDTIME()</code>函数进行时间加操作<br /><strong>命令语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ADDTIME(&#x27;2023-12-31 23:59:59&#x27;, &#x27;1:1:1&#x27;), ADDTIME(&#x27;01:01:01&#x27;, &#x27;01:01:01&#x27;);</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong><br /><img src="http://www.crygcat.top:5661/YCDIcz.png" alt="mysql日期19" /></p><h3 id="日期减subtimedate-expr函数"><a class="markdownIt-Anchor" href="#日期减subtimedate-expr函数"></a> 日期减：SUBTIME(date expr)函数</h3><p><code>SUBTIME(date expr)</code>函数将expr值减去到date，并返回修改后的值，date是一个日期或者日期表达式，而expr是一个时间表达式。<br /><strong>案例：</strong> 使用<code>SUBTIME()</code>函数进行时间减操作<br /><strong>命令语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select SUBTIME(&#x27;2023-12-31 23:59:59&#x27;, &#x27;1:1:1&#x27;), SUBTIME(&#x27;01:01:01&#x27;, &#x27;01:01:01&#x27;);</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong><br /><img src="http://www.crygcat.top:5661/xIKxn1.png" alt="mysql日期20" /></p><h3 id="日期差datediffdate1date2函数"><a class="markdownIt-Anchor" href="#日期差datediffdate1date2函数"></a> 日期差：DATEDIFF(date1,date2)函数</h3><p><code>DATEDIFF(date1,date2)</code>函数返回起始时间date1和结束时间date2之间的天数。date1和date2为日期或者date-and-time表达式，计算中只用到这些值的日期部分。<br /><strong>案例：</strong> 使用<code>DATEDIFF()</code>函数计算两个日期之间间隔的天数<br /><strong>命令语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select DATEDIFF(&#x27;2023-12-31 23:59:59&#x27;, &#x27;2023-01-01&#x27;), DATEDIFF(&#x27;2023-12-31 23:59:59&#x27;, &#x27;2024-01-01&#x27;);</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong><br /><img src="http://www.crygcat.top:5661/kwIejo.png" alt="mysql日期21" /><br /><br></p><h2 id="格式化日期和时间的函数"><a class="markdownIt-Anchor" href="#格式化日期和时间的函数"></a> 格式化日期和时间的函数</h2><h3 id="date_formatdateformat函数"><a class="markdownIt-Anchor" href="#date_formatdateformat函数"></a> DATE_FORMAT(date,format)函数</h3><p><code>DATE_FORMAT(date,format)</code>函数根据format指定的格式显示date值。<br />主要的format格式如下表所示：</p><table><thead><tr><th style="text-align:left">说明符</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">%Y</td><td style="text-align:left">4位数形式的年份</td></tr><tr><td style="text-align:left">%y</td><td style="text-align:left">2位数形式的年份</td></tr><tr><td style="text-align:left">%M</td><td style="text-align:left">月份名称(January-December)</td></tr><tr><td style="text-align:left">%b</td><td style="text-align:left">月份的缩写名称(Jan-Dec)</td></tr><tr><td style="text-align:left">%c</td><td style="text-align:left">月份，数字形式(0-12)</td></tr><tr><td style="text-align:left">%m</td><td style="text-align:left">月份，数字形式(00-12)</td></tr><tr><td style="text-align:left">%a</td><td style="text-align:left">星期几的缩写名称(Sum-Sat)</td></tr><tr><td style="text-align:left">%W</td><td style="text-align:left">工作日名称(周日 - 周六)</td></tr><tr><td style="text-align:left">%w</td><td style="text-align:left">一周中的每日(0=周日 - 6=周六)</td></tr><tr><td style="text-align:left">%D</td><td style="text-align:left">带有英语后缀的该月日期 (0<sup>th</sup>，1<sup>st</sup>，2<sup>nd</sup>，3<sup>rd</sup>…)</td></tr><tr><td style="text-align:left">%d</td><td style="text-align:left">该月日期，数字形式(00-31)</td></tr><tr><td style="text-align:left">%e</td><td style="text-align:left">该月日期，数字形式(0-31)</td></tr><tr><td style="text-align:left">%p</td><td style="text-align:left">上午(AM)或下午(PM)</td></tr><tr><td style="text-align:left">%H</td><td style="text-align:left">以2位数表示24小时(00-23)</td></tr><tr><td style="text-align:left">%h,%I</td><td style="text-align:left">以2位数表示12小时(01-12)</td></tr><tr><td style="text-align:left">%k</td><td style="text-align:left">以24小时制表示(0-23)</td></tr><tr><td style="text-align:left">%l</td><td style="text-align:left">以12小时制表示(1-12)</td></tr><tr><td style="text-align:left">%i</td><td style="text-align:left">分钟，数字形式(00-59)</td></tr><tr><td style="text-align:left">%S,%s</td><td style="text-align:left">以2位数形式表示秒(00-59)</td></tr><tr><td style="text-align:left">%f</td><td style="text-align:left">微秒(000000-999999)</td></tr><tr><td style="text-align:left">%j</td><td style="text-align:left">一年中的天数(001-366)</td></tr><tr><td style="text-align:left">%r</td><td style="text-align:left">时间，12小时制(hh:mm:ss AM/PM)</td></tr><tr><td style="text-align:left">%T</td><td style="text-align:left">时间，24小时制 (HH:mm:ss)</td></tr><tr><td style="text-align:left">%U</td><td style="text-align:left">周(00-53)，其中周日为每周第一天</td></tr><tr><td style="text-align:left">%u</td><td style="text-align:left">周(00-53)，其中周一为每周第一天</td></tr><tr><td style="text-align:left">%V</td><td style="text-align:left">周(01-53)，周日为每周第一天；配合 %X 使用</td></tr><tr><td style="text-align:left">%v</td><td style="text-align:left">周(01-53)，周一为每周第一天；配合 %x 使用</td></tr><tr><td style="text-align:left">%X</td><td style="text-align:left">该周的年份，其中周日为每周第一天；配合 %V 使用</td></tr><tr><td style="text-align:left">%x</td><td style="text-align:left">该周的年份，其中周一为每周第一天；配合 %v 使用</td></tr></tbody></table><p><strong>案例：</strong> 使用<code>DATE_FORMAT()</code>函数格式化输出日期和时间值<br /><strong>命令语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select DATE_FORMAT(&#x27;2023-01-01 10:10:10&#x27;, &#x27;%W %M %Y&#x27;) AS col1, DATE_FORMAT(&#x27;2023-01-01 10:10:10&#x27;, &#x27;%D %y %a %b %m %b %j&#x27;) AS col2, DATE_FORMAT(&#x27;2023-01-01 10:10:10&#x27;, &#x27;%H %i %s&#x27;) AS col3, DATE_FORMAT(&#x27;2023-01-01 10:10:10&#x27;, &#x27;%X %V&#x27;) AS col4;</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong><br /><img src="http://www.crygcat.top:5661/VW3qcC.png" alt="mysql日期22" /></p><h3 id="time_formattimeformat函数"><a class="markdownIt-Anchor" href="#time_formattimeformat函数"></a> TIME_FORMAT(time,format)函数</h3><p><code>TIME_FORMAT(time,format)</code>函数根据format字符串安排time值的格式。若time值包含一个大于23的小时部分，%H和%K小时格式说明会产生一个超出0—23的通常范围的值。<br /><strong>案例：</strong> 使用<code>TIME_FORMAT()</code>函数格式化输出时间值<br /><strong>命令语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select TIME_FORMAT(&#x27;20:00:00&#x27;, &#x27;%H %k %h %I %l&#x27;);</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong><br /><img src="http://www.crygcat.top:5661/ZgJMEy.png" alt="mysql日期23" /></p><h3 id="get_formatval_typeformat_type函数"><a class="markdownIt-Anchor" href="#get_formatval_typeformat_type函数"></a> GET_FORMAT(val_type,format_type)函数</h3><p><code>GET_FORMAT(val_type,format_type)</code>函数返回日期时间字符串的显示格式，<code>val_type</code>表示日期数据类型，包括<code>DATE</code>、<code>DATETIME</code>和<code>TIME</code>；<code>format_type</code>表示格式化显示类型，包括<code>EUR</code>、<code>INTERVAL</code>、<code>ISO</code>、<code>JIS</code>、<code>USA</code>。<br /><code>GET_FORMAT</code>根据两个值类型组合返回的字符串显示格式，如下表：</p><table><thead><tr><th style="text-align:left">值类型</th><th style="text-align:left">格式化类型</th><th style="text-align:left">显示格式字符串</th></tr></thead><tbody><tr><td style="text-align:left">DATE</td><td style="text-align:left">EUR</td><td style="text-align:left">%d.%m.%Y</td></tr><tr><td style="text-align:left">DATE</td><td style="text-align:left">INTERVAL</td><td style="text-align:left">%Y%m%d</td></tr><tr><td style="text-align:left">DATE</td><td style="text-align:left">ISO</td><td style="text-align:left">%Y-%m-%d</td></tr><tr><td style="text-align:left">DATE</td><td style="text-align:left">JIS</td><td style="text-align:left">%Y-%m-%d</td></tr><tr><td style="text-align:left">DATE</td><td style="text-align:left">USA</td><td style="text-align:left">%m.%d.%Y</td></tr><tr><td style="text-align:left">TIME</td><td style="text-align:left">EUR</td><td style="text-align:left">%H.%i.%s</td></tr><tr><td style="text-align:left">TIME</td><td style="text-align:left">INTERVAL</td><td style="text-align:left">%H%i%s</td></tr><tr><td style="text-align:left">TIME</td><td style="text-align:left">ISO</td><td style="text-align:left">%H:%i:%s</td></tr><tr><td style="text-align:left">TIME</td><td style="text-align:left">JIS</td><td style="text-align:left">%H:%i:%s</td></tr><tr><td style="text-align:left">TIME</td><td style="text-align:left">USA</td><td style="text-align:left">%H:%i:%s %p</td></tr><tr><td style="text-align:left">DATETIME</td><td style="text-align:left">EUR</td><td style="text-align:left">%Y-%m-%d %H.%i.%s</td></tr><tr><td style="text-align:left">DATETIME</td><td style="text-align:left">INTERVAL</td><td style="text-align:left">%Y%m%d%H%i%s</td></tr><tr><td style="text-align:left">DATETIME</td><td style="text-align:left">ISO</td><td style="text-align:left">%Y-%m-%d %H:%i:%s</td></tr><tr><td style="text-align:left">DATETIME</td><td style="text-align:left">JIS</td><td style="text-align:left">%Y-%m-%d %H:%i:%s</td></tr><tr><td style="text-align:left">DATETIME</td><td style="text-align:left">USA</td><td style="text-align:left">%Y-%m-%d %H.%i.%s</td></tr></tbody></table><p><strong>案例：</strong> 使用GET_FORMAT()函数显示不同格式化下的格式字符串，SQL语句如下：<br /><strong>命令语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select GET_FORMAT(DATE, &#x27;EUR&#x27;), GET_FORMAT(DATE, &#x27;USA&#x27;), DATE_FORMAT(&#x27;2023-02-01 20:50:10&#x27;, GET_FORMAT(DATE,&#x27;USA&#x27;));</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong><br /><img src="http://www.crygcat.top:5661/WE6Qy3.png" alt="mysql日期24" /><br /><br></p><blockquote><p>原文：<a href="https://zhuanlan.zhihu.com/p/42067899">https://zhuanlan.zhihu.com/p/42067899</a></p></blockquote><hr />]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Mysql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】Hexo常见问题合集（持续更新）</title>
      <link href="/posts/874a95c7.html"/>
      <url>/posts/874a95c7.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-hexo-d-部署后总需要重新改域名解决"><a class="markdownIt-Anchor" href="#一-hexo-d-部署后总需要重新改域名解决"></a> 一、hexo d 部署后总需要重新改域名解决</h1><blockquote><p>原文：<a href="https://blog.csdn.net/qq_38332436/article/details/81907686">https://blog.csdn.net/qq_38332436/article/details/81907686</a></p></blockquote><ol><li>在<code>source</code>目录下（不是hexo根目录下），创建一个<code>CNAME</code>文件，可以用sublime创建，然后保存成（All files格式），<code>CNAME</code>文件里写自己新的域名</li><li><code>hexo g</code>重新生成一下</li><li><code>hexo d</code>部署到 github 上</li><li>完成</li></ol><h1 id="二-hexo-引入图床图片失效问题"><a class="markdownIt-Anchor" href="#二-hexo-引入图床图片失效问题"></a> 二、hexo 引入图床，图片失效问题</h1><blockquote><p>原文：<a href="https://www.jianshu.com/p/5b58ecce6443">https://www.jianshu.com/p/5b58ecce6443</a></p></blockquote><p>在<code>/butterfly/layout/includes</code>目录下有一个<code>head.pug</code>文件，修改该文件的meta信息，会使生成的所有页面都带有该head。<br />在<code>head.pug</code>文件中添加如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meta(name=&quot;referrer&quot; content=&quot;no-referrer&quot;)</span><br></pre></td></tr></table></figure><hr />]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 合集 </tag>
            
            <tag> 持续更新 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Node】Node.js安装配置</title>
      <link href="/posts/41a2eaca.html"/>
      <url>/posts/41a2eaca.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-node介绍"><a class="markdownIt-Anchor" href="#一-node介绍"></a> 一、Node介绍</h1><p>Node.js发布于2009年5月，由Ryan Dahl开发，是一个基于Chrome V8引擎的JavaScript运行环境，使用了一个事件驱动、非阻塞式I/O模型，让JavaScript 运行在服务端的开发平台，它让JavaScript成为与PHP、Python、Perl、Ruby等服务端语言平起平坐的脚本语言。</p><hr /><h1 id="二-本体安装nodejs"><a class="markdownIt-Anchor" href="#二-本体安装nodejs"></a> 二、本体安装（Node.js）</h1><h2 id="1-下载地址nodejs"><a class="markdownIt-Anchor" href="#1-下载地址nodejs"></a> 1. 下载地址：<a href="https://nodejs.org/zh-cn/">Node.js</a></h2><p><img src="http://www.crygcat.top:5661/EJzQMm.png" alt="Node.js中文下载页" /></p><h2 id="2-安装淘宝镜像"><a class="markdownIt-Anchor" href="#2-安装淘宝镜像"></a> 2. 安装淘宝镜像</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 使用命令安装淘宝镜像</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org </span><br></pre></td></tr></table></figure><h2 id="3-常用node指令"><a class="markdownIt-Anchor" href="#3-常用node指令"></a> 3. 常用Node指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 查看Node版本</span><br><span class="line">node -v</span><br><span class="line"></span><br><span class="line">//查询全局模块</span><br><span class="line">npm ls -g --depth=0</span><br></pre></td></tr></table></figure><h2 id="4-卸载node"><a class="markdownIt-Anchor" href="#4-卸载node"></a> 4. 卸载Node</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//删除全局node_modules目录</span><br><span class="line">sudo rm -rf /usr/local/lib/node_ modules</span><br><span class="line"></span><br><span class="line">//删除全局node模块注册的软链</span><br><span class="line">cd /usr/local/bin &amp;&amp; ls -l grep &quot;../lib/node_modules/&quot; | awk &quot; &#123;print $9&#125;&quot; xargs rm</span><br><span class="line"></span><br><span class="line">//删除node</span><br><span class="line">sudo rm -r bin/node bin/node-waf include/node lib/node lib/pkgconfig/nodejs.pc share/man/man1/node.1</span><br><span class="line"></span><br><span class="line">//彻底删除，查询后到对应文件夹下删除文件</span><br><span class="line">where npm</span><br></pre></td></tr></table></figure><hr /><h1 id="三-nvm版本管理工具"><a class="markdownIt-Anchor" href="#三-nvm版本管理工具"></a> 三、Nvm版本管理工具</h1><p>用于存放多版本node的工具，官网github地址：<a href="https://github.com/nvm-sh/nvm#install-script">Nvm</a></p><h2 id="1-远程安装"><a class="markdownIt-Anchor" href="#1-远程安装"></a> 1. 远程安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//v0.39.1为版本号，可以去官网查看最新的版本</span><br><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.39.1/install.sh | bash</span><br><span class="line"></span><br><span class="line">//v0.39.1为版本号，可以去官网查看最新的版本</span><br><span class="line">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash</span><br></pre></td></tr></table></figure><p>注：最新的苹果<code>Arm</code>架构安装时，会下载<code>Arm</code>版本，没有<code>Arm</code>版本时会报错，需要先执行兼容代码，此时再使用安装命令就会下载<code>x86</code>架构的 Node 了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arch -x86_64 zsh</span><br></pre></td></tr></table></figure><h2 id="2-配置环境"><a class="markdownIt-Anchor" href="#2-配置环境"></a> 2. 配置环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//验证安装</span><br><span class="line">command -v nvm</span><br></pre></td></tr></table></figure><p>验证失败，需要手动配置变量环境</p><h3 id="方案一配置环境变量"><a class="markdownIt-Anchor" href="#方案一配置环境变量"></a> 方案一：配置环境变量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br><span class="line"></span><br><span class="line">//输入以下内容</span><br><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br><span class="line">[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion</span><br><span class="line"></span><br><span class="line">//刷新环境变量</span><br><span class="line">source ~/.bash_profile</span><br><span class="line"></span><br><span class="line">//关闭命令行窗口，然后重启窗口查看是否生效</span><br></pre></td></tr></table></figure><h3 id="方案二配置zsh"><a class="markdownIt-Anchor" href="#方案二配置zsh"></a> 方案二：配置zsh</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line">//输入以下内容</span><br><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br><span class="line">[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion</span><br><span class="line"></span><br><span class="line">//刷新环境变量</span><br><span class="line">source ~/.zshrc</span><br><span class="line"></span><br><span class="line">//关闭命令行窗口，然后重启窗口查看是否生效</span><br></pre></td></tr></table></figure><h2 id="3-常用nvm指令包含安装node指令"><a class="markdownIt-Anchor" href="#3-常用nvm指令包含安装node指令"></a> 3. 常用Nvm指令（包含安装Node指令）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//安装最新稳定版的node</span><br><span class="line">nvm install stable</span><br><span class="line"></span><br><span class="line">//安装指定版本，可模糊安装，如：安装v6.2.0，既可nvm install v6.2.0，又可nvm install 6.2.2</span><br><span class="line">nvm install [版本号]</span><br><span class="line"></span><br><span class="line">//删除已安装的指定版本，语法与install类似</span><br><span class="line">nvm uninstall [版本号]</span><br><span class="line"></span><br><span class="line">//切换使用指定的版本node</span><br><span class="line">nvm use [版本号]</span><br><span class="line"></span><br><span class="line">//列出所有安装的版本</span><br><span class="line">nvm ls</span><br><span class="line"></span><br><span class="line">//列出所以远程服务器的版本（官方node version list)</span><br><span class="line">nvm ls-remote</span><br><span class="line"></span><br><span class="line">//显示当前的版本</span><br><span class="line">nvm current</span><br><span class="line"></span><br><span class="line">//给不同的版本号添加别名</span><br><span class="line">nvm alias</span><br><span class="line"></span><br><span class="line">//删除已定义的别名</span><br><span class="line">nvm unalias</span><br><span class="line"></span><br><span class="line">//在当前版本node环境下，重新全局安装指定版本号的npm包</span><br><span class="line">nvm reinstall-packages</span><br><span class="line"></span><br><span class="line">//设置nodejs默认版本</span><br><span class="line">nvm alias default [版本号]</span><br></pre></td></tr></table></figure><h2 id="4-卸载nvm"><a class="markdownIt-Anchor" href="#4-卸载nvm"></a> 4. 卸载Nvm</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm use system</span><br><span class="line">sudo npm uninstall -g a_module</span><br></pre></td></tr></table></figure><h2 id="5-常见问题"><a class="markdownIt-Anchor" href="#5-常见问题"></a> 5. 常见问题</h2><blockquote><p>问题1：xcode-select: note: no developer tools were found at ‘xxx’<br />解决：需要安装git</p></blockquote><hr />]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 教程 </tag>
            
            <tag> Node </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】Hexo常用插件推荐（持续更新）</title>
      <link href="/posts/c0ee085a.html"/>
      <url>/posts/c0ee085a.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-官网插件"><a class="markdownIt-Anchor" href="#一-官网插件"></a> 一、官网插件</h1><blockquote><p>所有插件，均可在<a href="https://hexo.io/plugins/">Hexo官网插件</a>中找到</p></blockquote><p>目前本站已安装插件：</p><blockquote><p>生成永久链接（hexo-abbrlink）<br />Makedown渲染器（hexo-renderer-markdown-it-plus）<br />搜索功能（hexo-generator-search）<br />字数统计（hexo-wordcount）</p></blockquote><hr /><h1 id="二-生成永久链接hexo-abbrlink"><a class="markdownIt-Anchor" href="#二-生成永久链接hexo-abbrlink"></a> 二、生成永久链接（hexo-abbrlink）</h1><p><code>hexo-abbrlink</code>插件通过算法，可以优化博客路径，默认路径<code>https://blog.crygcat.top/2023/03/01/【Hexo】Hexo常用插件推荐</code>，还会带上标题，这款插件可以将路径优化为<code>https://blog.crygcat.top/posts/c0ee085a</code>等等，支持16进制。</p><h2 id="1-安装插件"><a class="markdownIt-Anchor" href="#1-安装插件"></a> 1. 安装插件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><h2 id="2-配置插件"><a class="markdownIt-Anchor" href="#2-配置插件"></a> 2. 配置插件</h2><p>在<code>_config.yml</code>文件末尾，添加如下配置项（记得把原来的<code>permalink:</code>注释或者删除）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#设置永久链接</span><br><span class="line">permalink: posts/:abbrlink.html  # 此处可以自己设置，也可以直接使用 :/abbrlink</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc16      #算法： crc16(default) and crc32</span><br><span class="line">  rep: dec        #进制： dec(default) and hex</span><br><span class="line">  drafts: false   #(true)Process draft,(false)Do not process draft. false(default) </span><br><span class="line">  # Generate categories from directory-tree</span><br><span class="line">  # depth: the max_depth of directory-tree you want to generate, should &gt; 0</span><br><span class="line">  auto_category:</span><br><span class="line">     enable: true  #true(default)</span><br><span class="line">     depth:        #3(default)</span><br><span class="line">     over_write: false </span><br><span class="line">  auto_title: false #enable auto title, it can auto fill the title by path</span><br><span class="line">  auto_date: false #enable auto date, it can auto fill the date by time today</span><br><span class="line">  force: false #enable force mode,in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink. This only updates abbrlink rather than other front variables.</span><br></pre></td></tr></table></figure><p><strong>Abbrlink插件拥有两项设置选项:</strong><br />alg: 算法(目前支持<code>crc16</code>和<code>crc32</code>算法，默认值是<code>crc16</code>)<br />rep: 形式(生成的链接可以是<code>十六进制</code>格式也可以是<code>十进制</code>格式，默认值是<code>十进制</code>格式)</p><p><strong>示例：</strong></p><blockquote><p>crc16 &amp; hex<br /><a href="https://test.com/posts/55c6.html">https://test.com/posts/55c6.html</a><br />crc16 &amp; dec<br /><a href="https://test.com/posts/43212.html">https://test.com/posts/43212.html</a></p><p>crc32 &amp; hex<br /><a href="https://test.com/posts/6ec16a2c.html">https://test.com/posts/6ec16a2c.html</a><br />crc32 &amp; dec<br /><a href="https://test.com/posts/1521457752.html">https://test.com/posts/1521457752.html</a></p></blockquote><h2 id="3-常见问题"><a class="markdownIt-Anchor" href="#3-常见问题"></a> 3. 常见问题</h2><blockquote><ol><li>刚使用这个插件后，阅读人数和评论都会变为0，介意慎用！</li></ol></blockquote><hr /><h1 id="三-更换makedown渲染器"><a class="markdownIt-Anchor" href="#三-更换makedown渲染器"></a> 三、更换Makedown渲染器</h1><p>由于 Hexo 默认的 Markdown 渲染器(<code>hexo-renderer-marked</code>)不支持复杂公式，涉及到一些数学公式时，就无法显示和使用，这时候就需要更换 Markdown 渲染器。<br />本站使用的渲染器为<code>hexo-renderer-markdown-it-plus</code></p><h2 id="1-卸载旧渲染器"><a class="markdownIt-Anchor" href="#1-卸载旧渲染器"></a> 1. 卸载旧渲染器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br></pre></td></tr></table></figure><h2 id="2-安装新渲染器"><a class="markdownIt-Anchor" href="#2-安装新渲染器"></a> 2. 安装新渲染器</h2><p>以下列出几种常用的Makedown渲染器</p><h3 id="hexo-renderer-marked"><a class="markdownIt-Anchor" href="#hexo-renderer-marked"></a> hexo-renderer-marked</h3><p>Hexo 默认的 Markdown 的渲染器，不支持 Mathjax，不支持插件扩展，不支持 emoji 表情<br /><strong>项目地址：</strong> <a href="https://github.com/hexojs/hexo-renderer-marked">https://github.com/hexojs/hexo-renderer-marked</a><br /><strong>安装命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-marked --save</span><br></pre></td></tr></table></figure><h3 id="hexo-renderer-kramed"><a class="markdownIt-Anchor" href="#hexo-renderer-kramed"></a> hexo-renderer-kramed</h3><p>基于<code>hexo-renderer-marked</code>，支持 Mathjax，不支持插件的扩展，不支持 emoji 表情<br /><strong>项目地址：</strong> <a href="https://github.com/sun11/hexo-renderer-kramed">https://github.com/sun11/hexo-renderer-kramed</a><br /><strong>安装命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><h3 id="hexo-renderer-markdown-it"><a class="markdownIt-Anchor" href="#hexo-renderer-markdown-it"></a> hexo-renderer-markdown-it</h3><p>渲染速度比<code>hexo-renderer-marked</code>快，支持脚注（上标，下标，下划线），支持 emoji 表情，支持 LaTeX，扩展需要另外通过 npm 安装，你可以在 <a href="https://www.npmjs.com/search?q=keywords%3Amarkdown-it">这里</a> 找到更多拓展。<br /><strong>项目地址：</strong> <a href="https://github.com/hexojs/hexo-renderer-markdown-it">https://github.com/hexojs/hexo-renderer-markdown-it</a><br /><strong>安装命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-markdown-it --save</span><br></pre></td></tr></table></figure><h3 id="hexo-renderer-markdown-it-plus"><a class="markdownIt-Anchor" href="#hexo-renderer-markdown-it-plus"></a> hexo-renderer-markdown-it-plus</h3><p>在<code>hexo-renderer-markdown-it</code>的基础上默认自带许多插件，可以直接使用<br /><strong>项目地址：</strong> <a href="https://github.com/CHENXCHEN/hexo-renderer-markdown-it-plus">https://github.com/CHENXCHEN/hexo-renderer-markdown-it-plus</a><br /><strong>安装命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-markdown-it-plus --save</span><br></pre></td></tr></table></figure><hr /><h1 id="四-搜索功能hexo-generator-search"><a class="markdownIt-Anchor" href="#四-搜索功能hexo-generator-search"></a> 四、搜索功能（hexo-generator-search）</h1><h2 id="1-安装插件-2"><a class="markdownIt-Anchor" href="#1-安装插件-2"></a> 1. 安装插件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><h2 id="2-配置插件-2"><a class="markdownIt-Anchor" href="#2-配置插件-2"></a> 2. 配置插件</h2><p>在<code>_config.yml</code>文件末尾，添加如下配置项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: all # post:文章范围、page:页面范围、all:覆盖所有</span><br><span class="line">  content: true # 内容是否包含每一篇文章的全部内容</span><br><span class="line">  template:  # ./search.xml 指定定制的XML模板</span><br></pre></td></tr></table></figure><p>打开主题配置文件，配置搜索功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#开启本地搜索，即可我们正常的使用</span><br><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  preload: false</span><br><span class="line">  CDN:</span><br></pre></td></tr></table></figure><blockquote><p>本站使用的是<code>butterfly</code>，不同主题可能配置方式不同，请根据自己的主题，更改相应操作</p></blockquote><hr /><h1 id="五-字数统计hexo-wordcount"><a class="markdownIt-Anchor" href="#五-字数统计hexo-wordcount"></a> 五、字数统计（hexo-wordcount）</h1><h2 id="1-安装插件-3"><a class="markdownIt-Anchor" href="#1-安装插件-3"></a> 1. 安装插件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><h2 id="2-配置插件-3"><a class="markdownIt-Anchor" href="#2-配置插件-3"></a> 2. 配置插件</h2><p>打开主题配置文件，配置字数统计功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># wordcount (字數統計)</span><br><span class="line"># see https://butterfly.js.org/posts/ceeb73f/#字數統計</span><br><span class="line">wordcount:</span><br><span class="line">  enable: true</span><br><span class="line">  post_wordcount: true</span><br><span class="line">  min2read: true</span><br><span class="line">  total_wordcount: true</span><br></pre></td></tr></table></figure><blockquote><p>本站使用的是<code>butterfly</code>，不同主题可能配置方式不同，请根据自己的主题，更改相应操作</p></blockquote><hr /><h1 id="六-添加-rss-订阅hexo-generator-feed"><a class="markdownIt-Anchor" href="#六-添加-rss-订阅hexo-generator-feed"></a> 六、添加 RSS 订阅（hexo-generator-feed）</h1><blockquote><p>RSS 的全称是 Really Simple Syndication（简易信息聚合），它是一种消息来源的格式规范，网站可以按照这种格式规范提供文章的标题、摘要、全文等信息给订阅用户，用户可以通过订阅不同网站 RSS 链接的方式将不同的信息源进行聚合，在一个工具里阅读这些内容。当网站内容更新时，可以通过订阅 RSS 源在 RSS 阅读器上获取更新的信息</p></blockquote><h2 id="1-安装插件-4"><a class="markdownIt-Anchor" href="#1-安装插件-4"></a> 1. 安装插件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><h2 id="2-配置插件-4"><a class="markdownIt-Anchor" href="#2-配置插件-4"></a> 2. 配置插件</h2><p>在<code>_config.yml</code>文件末尾，添加如下配置项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">  enable: true</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">  hub:</span><br><span class="line">  content:</span><br><span class="line">  content_limit: 140</span><br><span class="line">  content_limit_delim: &quot; &quot;</span><br><span class="line">  order_by: -date</span><br></pre></td></tr></table></figure><blockquote><p>更多配置信息，可以在这里查看<a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a></p></blockquote><p>配置完成之后，重新部署，在你的网站域名后添加<code>/atom.xml</code>即可查看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.crygcat.top/atom.xml</span><br></pre></td></tr></table></figure><hr /><h1 id="七-添加看板娘"><a class="markdownIt-Anchor" href="#七-添加看板娘"></a> 七、添加看板娘</h1><p>在你的 Hexo 里放上一只二次元看板娘<br /><strong>项目地址：</strong> <a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md">hexo-helper-live2d</a><br /><strong>演示：</strong> <a href="https://l2dwidget.js.org/dev.html">https://l2dwidget.js.org/dev.html</a><br /><img src="http://www.crygcat.top:5661/hDx07B.png" alt="Hexo插件-看板娘" /></p><h2 id="1-安装插件-5"><a class="markdownIt-Anchor" href="#1-安装插件-5"></a> 1. 安装插件</h2><p>在<code>Git Bash</code>中安装模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add hexo-helper-live2d</span><br></pre></td></tr></table></figure><h2 id="2-配置插件-5"><a class="markdownIt-Anchor" href="#2-配置插件-5"></a> 2. 配置插件</h2><p>在<code>_config.yml</code>文件末尾，添加如下配置项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: false</span><br><span class="line">  debug: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-wanko  ## 更换为你的模型</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br><span class="line">  react:</span><br><span class="line">    opacity: 0.7</span><br></pre></td></tr></table></figure><p>现有所有模型：<a href="https://github.com/xiazeyu/live2d-widget-models">https://github.com/xiazeyu/live2d-widget-models</a><br />安装后的模型，可以在<code>packages/</code>中看到<br /><strong>安装语句：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install 模型的包名</span><br></pre></td></tr></table></figure><p>完成后，将包名输入位于<code>_config.yml</code>的<code>model.use</code>中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model:</span><br><span class="line">    use: 安装的模型的包名</span><br></pre></td></tr></table></figure><hr />]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 合集 </tag>
            
            <tag> 持续更新 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】Hexo博客搭建</title>
      <link href="/posts/b925551.html"/>
      <url>/posts/b925551.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-hexo介绍"><a class="markdownIt-Anchor" href="#一-hexo介绍"></a> 一、Hexo介绍</h1><p>Hexo是一个快速、简洁且高效的博客框架，具体可以见Hexo官网，它在github上的star数现在已经到34.7k，Hexo主要有以下特点：</p><blockquote><ol><li>超快速度：Node.js所带来的超快生成速度，可以让上百个页面在几秒内完成渲染。</li><li>支持Markdown：Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</li><li>一键部署：只需一条指令即可部署到 GitHub Pages, Heroku 或其他平台。</li><li>插件或可扩展性：强大的 API 带来无限的可能，与数种模板引擎（EJS，Pug，Nunjucks）和工具（Babel，PostCSS，Less/Sass）轻易集成。</li></ol></blockquote><hr /><h1 id="二-安装环境"><a class="markdownIt-Anchor" href="#二-安装环境"></a> 二、安装环境</h1><h2 id="1-安装nodejs"><a class="markdownIt-Anchor" href="#1-安装nodejs"></a> 1. 安装Node.js</h2><p><a href="https://blog.crygcat.top/posts/41a2eaca.html">Node.js本站安装教程</a></p><hr /><h1 id="三-安装hexo"><a class="markdownIt-Anchor" href="#三-安装hexo"></a> 三、安装Hexo</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 使用命令去安装Hexo</span><br><span class="line">cnpm install -g hexo-cli </span><br></pre></td></tr></table></figure><hr /><h1 id="四-markdown渲染器"><a class="markdownIt-Anchor" href="#四-markdown渲染器"></a> 四、Markdown渲染器</h1><hr /><h1 id="五-常用插件"><a class="markdownIt-Anchor" href="#五-常用插件"></a> 五、常用插件</h1><p><a href="https://blog.crygcat.top/posts/c0ee085a.html">Hexo本站常用插件推荐（持续更新）</a></p><hr /><h1 id="六-常见问题"><a class="markdownIt-Anchor" href="#六-常见问题"></a> 六、常见问题</h1><h2 id="hexo本站常见问题合集持续更新"><a class="markdownIt-Anchor" href="#hexo本站常见问题合集持续更新"></a> <a href="https://blog.crygcat.top/posts/874a95c7.html">Hexo本站常见问题合集（持续更新）</a></h2>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
